/**
 * Starter code with JUnit tests for code generation used in the class project in COP5556 Programming Language Principles 
 * at the University of Florida, Spring 2018.
 * 
 * This software is solely for the educational benefit of students 
 * enrolled in the course during the Spring 2018 semester.  
 * 
 * This software, and any software derived from it,  may not be shared with others or posted to public web sites,
 * either during the course or afterwards.
 * 
 *  @Beverly A. Sanders, 2018
 */


package cop5556sp18;

import static org.junit.Assert.*;

import java.awt.image.BufferedImage;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import javax.swing.JFrame;

import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import cop5556sp18.CodeGenUtils.DynamicClassLoader;
import cop5556sp18.AST.Program;

public class CodeGenTest {
	
	//determines whether show prints anything
	static boolean doPrint = true;
	
	static void show(Object s) {
		if (doPrint) {
			System.out.println(s);
		}
	}

	//determines whether a classfile is created
	static boolean doCreateFile = false;

	@Rule
	public ExpectedException thrown = ExpectedException.none();
	

	//values passed to CodeGenerator constructor to control grading and debugging output
	private boolean devel = true; //if true, print devel output
	private boolean grade = true; //if true, print grade output
	
//	private boolean devel = false; 
//	private boolean grade = false; 
	
	//sets the default width and height of newly created images.  Should be small enough to fit on screen.
	public static final int defaultWidth = 1024;
	public static final int defaultHeight = 1024;

	
	/**
	 * Generates bytecode for given input.
	 * Throws exceptions for Lexical, Syntax, and Type checking errors
	 * 
	 * @param input   String containing source code
	 * @return        Generated bytecode
	 * @throws Exception
	 */
	byte[] genCode(String input) throws Exception {
		
		//scan, parse, and type check
		Scanner scanner = new Scanner(input);
		show(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		Program program = parser.parse();
		TypeChecker v = new TypeChecker();
		program.visit(v, null);
//		show(program);  //It may be useful useful to show this here if code generation fails

		//generate code
		CodeGenerator cv = new CodeGenerator(devel, grade, null, defaultWidth, defaultHeight);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		show(program); //doing it here shows the values filled in during code gen
		//display the generated bytecode
		show(CodeGenUtils.bytecodeToString(bytecode));
		
		//write byte code to file 
		if (doCreateFile) {
			String name = ((Program) program).progName;
			String classFileName = "bin/" + name + ".class";
			OutputStream output = new FileOutputStream(classFileName);
			output.write(bytecode);
			output.close();
			System.out.println("wrote classfile to " + classFileName);
		}
		
		//return generated classfile as byte array
		return bytecode;
	}
	
	/**
	 * Run main method in given class
	 * 
	 * @param className    
	 * @param bytecode    
	 * @param commandLineArgs  String array containing command line arguments, empty array if none
	 * @throws + 
	 * @throws Throwable 
	 */
	void runCode(String className, byte[] bytecode, String[] commandLineArgs) throws Exception  {
		RuntimeLog.initLog(); //initialize log used for grading.
		DynamicClassLoader loader = new DynamicClassLoader(Thread.currentThread().getContextClassLoader());
		Class<?> testClass = loader.define(className, bytecode);
		@SuppressWarnings("rawtypes")
		Class[] argTypes = {commandLineArgs.getClass()};
		Method m = testClass.getMethod("main", argTypes );
		show("Output from " + m + ":");  //print name of method to be executed
		Object passedArgs[] = {commandLineArgs};  //create array containing params, in this case a single array.
		try {
		m.invoke(null, passedArgs);	
		}
		catch (Exception e) {
			Throwable cause = e.getCause();
			if (cause instanceof Exception) {
				Exception ec = (Exception) e.getCause();
				throw ec;
			}
			throw  e;
		}
	}
	

	/**
	 * When invoked from JUnit, Frames containing images will be shown and then immediately deleted.
	 * To prevent this behavior, waitForKey will pause until a key is pressed.
	 * 
	 * @throws IOException
	 */
	void waitForKey() throws IOException {
		System.out.println("enter any char to exit");
		System.in.read();
	}

	/**
	 * When invoked from JUnit, Frames containing images will be shown and then immediately deleted.
	 * To prevent this behavior, keepFrame will keep the frame visible for 5000 milliseconds.
	 * 
	 * @throws Exception
	 */
	void keepFrame() throws Exception {
		Thread.sleep(5000);
	}
	
	
	
	


	/**
	 * Since we are not doing any optimization, the compiler will 
	 * still create a class with a main method and the JUnit test will
	 * execute it.  
	 * 
	 * The only thing it will do is append the "entering main" and "leaving main" messages to the log.
	 * 
	 * @throws Exception
	 */
	
	
	@Test
	public void emptyProg() throws Exception {
		String prog = "emptyProg";	
		String input = prog + "{}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n "+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	

	
	@Test
	public void integerLitShow() throws Exception {
		String prog = "intgegerLit";
		String input = prog + "{show 3;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void floatLitShow() throws Exception {
		String prog = "floatLit";
		String input = prog + "{show 3.0;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;3.0;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void booleanLitShow() throws Exception {
		String prog = "booleanLit";
		String input = prog + "{show true;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void imageLitShow() throws Exception {
		String prog = "imageLit";
		String input = prog + "{image a; show a;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declaration0() throws Exception {
		String prog = "intLit";
		String input = prog + "{int a;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declaration1() throws Exception {
		String prog = "floatLit";
		String input = prog + "{float a;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declaration2() throws Exception {
		String prog = "booleanLit";
		String input = prog + "{boolean a;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declaration3() throws Exception {
		String prog = "imageLit";
		String input = prog + "{image a;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declaration4() throws Exception {
		String prog = "imageLit2";
		String input = prog + "{image a[3, 4];} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign0() throws Exception {
		String prog = "booleanLit";
		String input = prog + "{int a; a := 2;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign1() throws Exception {
		String prog = "floatLit";
		String input = prog + "{float a; a := 2.0; show a;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;2.0;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign2() throws Exception {
		String prog = "booleanLit";
		String input = prog + "{boolean a; a := true;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign3() throws Exception {
		String prog = "imageLit";
		String input = prog + "{image a; image b;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign4() throws Exception {
		String prog = "imageLit";
		String input = prog + "{image a[1,2]; image b[3,4]; a := b;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	
	

	
	@Test
	public void declareAndAssign6() throws Exception {
		String prog = "intLit";
		String input = prog + "{int a; int b; b := 5; a := b + 5; show a;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;10;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign7() throws Exception {
		String prog = "intFloatLit";
		String input = prog + "{float a; int b; b := 5; a := b + 5.0; show a;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;10.0;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign8() throws Exception {
		String prog = "intFloatLit";
		String input = prog + "{float a; float b; b := 5.0; a := b + 5;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign9() throws Exception {
		String prog = "intFloatLit";
		String input = prog + "{float a; float b; b := 5.0; a := b + 5.0;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign10() throws Exception {
		String prog = "intFloatLit";
		String input = prog + "{float a; float b; b := 5.0; a := b - 6.0; show a;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;-1.0;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign11() throws Exception {
		String prog = "intFloatLit";
		String input = prog + "{boolean a; boolean b; b := true; a := b & false;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign12() throws Exception {
		String prog = "intFloatLit";
		String input = prog + "{int a; int b; b := 10; a := b % 3;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign13() throws Exception {
		String prog = "intFloatLit";
		String input = prog + "{int a; int b; b := 10; a := b | 3;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign14() throws Exception {
		String prog = "intFloatLit";
		String input = prog + "{boolean a; boolean b; b := true; a := b | false;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign15() throws Exception {
		String prog = "intFloatLit";
		String input = prog + "{int a; int b; b := 5; a := b ** 2; show a;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;25;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign16() throws Exception {
		String prog = "intFloatLit";
		String input = prog + "{float a; float b; b := 5.5; a := b ** 2; show a;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;30.25;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign17() throws Exception {
		String prog = "intFloatLit";
		String input = prog + "{float a; float b; b := 5.5; a := b ** 2.1; show a;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;35.872494;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign18() throws Exception {
		String prog = "intFloatLit";
		String input = prog + "{float a; float b; b := 5.2; a := 2 ** b; show a;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;36.758343;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign19() throws Exception {
		String prog = "intFloatLit";
		String input = prog + "{float a; int b; b := 7; a := b / 2.0; show a;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;3.5;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void sleep0() throws Exception {
		String prog = "sleepProgram";
		String input = prog + "{sleep 1000;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionUnary0() throws Exception {
		String prog = "unary";
		String input = prog + "{int a; a := !1; show a;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;-2;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionUnary1() throws Exception {
		String prog = "unary1";
		String input = prog + "{boolean a; a := !true; show a;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionUnary2() throws Exception {
		String prog = "unary1";
		String input = prog + "{int a; int b; b := 5; a := -b; show a;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;-5;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionPredefinedName0() throws Exception {
		String prog = "predef";
		String input = prog + "{int a; a := Z+5; show a;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;260;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionPredefinedName1() throws Exception {
		String prog = "predef";
		String input = prog + "{int a; a := default_height+default_width; show a;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;2048;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionFunctionAppWithExpressionArg0() throws Exception {
		String prog = "predef";
		String input = prog + "{int a; a := 5; show float(a);} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;5.0;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionFunctionAppWithExpressionArg1() throws Exception {
		String prog = "predef";
		String input = prog + "{float a; a := 5.0; show int(a);} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;5;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionFunctionAppWithExpressionArg2() throws Exception {
		String prog = "predef";
		String input = prog + "{float a; a := 180.0; show sin(a);} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;-0.80115265;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionFunctionAppWithExpressionArg3() throws Exception {
		String prog = "predef";
		String input = prog + "{float a; a := -180.0; show abs(a);} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;180.0;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionFunctionAppWithExpressionArg4() throws Exception {
		String prog = "predef";
		String input = prog + "{image a; show height(a);} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;1024;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionFunctionAppWithExpressionArg5() throws Exception {
		String prog = "predef";
		String input = prog + "{image a; show width(a);} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;1024;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	
	@Test
	public void expressionFunctionAppWithExpressionArg6() throws Exception {
		String prog = "predef";
		String input = prog + "{image a[103, 103]; show width(a);} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;103;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionFunctionAppWithExpressionArg7() throws Exception {
		String prog = "predef";
		String input = prog + "{int foo; foo := int(4.0); show foo;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;4;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void lhsIdent0() throws Exception {
		String prog = "predef";
		String input = prog + "{image foo; image bar; foo := bar; show foo; sleep 1000;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void lhsIdent1() throws Exception {
		String prog = "predef";
		String input = prog + "{int foo; int a; a := 5; foo := a; show foo;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;5;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void statementInput0() throws Exception {
		String prog = "si";
		String input = prog + "{int a; input a from @ 0; show a;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"5", "5.0"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;5;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void statementInput1() throws Exception {
		String prog = "si";
		String input = prog + "{float a; input a from @ 1; show a;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"5", "5.0"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;5.0;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void statementInput2() throws Exception {
		String prog = "si";
		String input = prog + "{filename a; input a from @ 0;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"My Galaxy.jpg"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionIdent3() throws Exception {
		String prog = "sif";
		String input = prog + "{int a; a := 5; show a;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"pic.png"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;5;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void statementInput3() throws Exception {
		String prog = "sif";
		String input = prog + "{image a; input a from @ 0; show a; sleep 1000;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"C:\\Users\\Sakshi\\Desktop\\University of Florida\\Apple.jpg"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void statementInput4() throws Exception {
		String prog = "sif";
		String input = prog + "{image a[500, 500]; input a from @ 0; show a; sleep 1000;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"C:\\Users\\Sakshi\\Desktop\\University of Florida\\Apple.jpg"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	

/*	
	public void dummy() {
		RuntimeImageSupport.readImage("bleh", null, null);
		
	}
	
	





/////////////////////// failed test  ///////////////////////////////////

@Test
public void failTest153() throws Exception {
String prog = "shown";
String input = prog+"{show -3; show -4.5; show -3-4.5;} ";    
byte[] bytecode = genCode(input);        
String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case        
runCode(prog, bytecode, commandLineArgs);    
show("Log:\n"+RuntimeLog.globalLog);
assertEquals("entering main;-3;-4.5;-7.5;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void failTest154() throws Exception {
String prog = "shown";
String input = prog+"{int y; y := 55; show y; y := -234; show y;} ";    
byte[] bytecode = genCode(input);        
String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case        
runCode(prog, bytecode, commandLineArgs);    
show("Log:\n"+RuntimeLog.globalLog);
assertEquals("entering main;55;-234;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void failTest155() throws Exception {
String prog = "shown";
String input = prog+"{int a; a := int(-3.7); show a; a := int(4); show a;} ";    
byte[] bytecode = genCode(input);        
String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case        
runCode(prog, bytecode, commandLineArgs);    
show("Log:\n"+RuntimeLog.globalLog);
assertEquals("entering main;-3;4;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void failTest156() throws Exception {
String prog = "shown";
String input = prog+"{float y; y := 6.6; show y; y := -0.5; show y;} ";    
byte[] bytecode = genCode(input);        
String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case        
runCode(prog, bytecode, commandLineArgs);    
show("Log:\n"+RuntimeLog.globalLog);
assertEquals("entering main;6.6;-0.5;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void failTest157() throws Exception {
String prog = "shown";
String input = prog+"{float a; a := float(-3.7); show a; a := float(4); show a;} ";    
byte[] bytecode = genCode(input);        
String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case        
runCode(prog, bytecode, commandLineArgs);    
show("Log:\n"+RuntimeLog.globalLog);
assertEquals("entering main;-3.7;4.0;leaving main;",RuntimeLog.globalLog.toString());
}



/*
@Test
public void failTest158() throws Exception {
String prog = "shown";
String input = prog+"{int a; a := 123456789; show red(a); show green(a); show blue(a);} ";    
byte[] bytecode = genCode(input);        
String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case        
runCode(prog, bytecode, commandLineArgs);    
show("Log:\n"+RuntimeLog.globalLog);
assertEquals("entering main;-3.7;4.0;leaving main;",RuntimeLog.globalLog.toString());
}
*/

@Test
public void failTest159() throws Exception {
String prog = "shown";
String input = prog+"{show !1; show !-1; show !0; show !-2;} ";    
byte[] bytecode = genCode(input);        
String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case        
runCode(prog, bytecode, commandLineArgs);    
show("Log:\n"+RuntimeLog.globalLog);
assertEquals("entering main;-2;0;-1;1;leaving main;",RuntimeLog.globalLog.toString());
}


public void dummy1(){
	int a = -2;
	System.out.println(~a);
}
//Failed Cases Retest2


public void failTest1() throws Exception {
String prog = "shown";
String input = prog+"prog{image y[512,256];\\n  show y;} ";    
byte[] bytecode = genCode(input);        
String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case        
runCode(prog, bytecode, commandLineArgs);    
show("Log:\n"+RuntimeLog.globalLog);
}

public void failTest2() throws Exception {
String prog = "shown";
String input = prog+"{show !1; show !-1; show !0; show !-2;} ";    
byte[] bytecode = genCode(input);        
String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case        
runCode(prog, bytecode, commandLineArgs);    
show("Log:\n"+RuntimeLog.globalLog);
}

public void failTest3() throws Exception {
String prog = "shown";
String input = prog+"prog{show Z; show default_width; show default_height;} ";    
byte[] bytecode = genCode(input);        
String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case        
runCode(prog, bytecode, commandLineArgs);    
show("Log:\n"+RuntimeLog.globalLog);
}

public void failTest4() throws Exception {
String prog = "shown";
String input = prog+"{show !1; show !-1; show !0; show !-2;} ";    
byte[] bytecode = genCode(input);        
String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case        
runCode(prog, bytecode, commandLineArgs);    
show("Log:\n"+RuntimeLog.globalLog);
}

public void failTest5() throws Exception {
String prog = "shown";
String input = prog+"{show !1; show !-1; show !0; show !-2;} ";    
byte[] bytecode = genCode(input);        
String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case        
runCode(prog, bytecode, commandLineArgs);    
show("Log:\n"+RuntimeLog.globalLog);
}

public void failTest6() throws Exception {
String prog = "shown";
String input = prog+"{show !1; show !-1; show !0; show !-2;} ";    
byte[] bytecode = genCode(input);        
String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case        
runCode(prog, bytecode, commandLineArgs);    
show("Log:\n"+RuntimeLog.globalLog);
}

public void failTest7() throws Exception {
String prog = "shown";
String input = prog+"{show !1; show !-1; show !0; show !-2;} ";    
byte[] bytecode = genCode(input);        
String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case        
runCode(prog, bytecode, commandLineArgs);    
show("Log:\n"+RuntimeLog.globalLog);
}

public void failTest8() throws Exception {
String prog = "shown";
String input = prog+"{show !1; show !-1; show !0; show !-2;} ";    
byte[] bytecode = genCode(input);        
String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case        
runCode(prog, bytecode, commandLineArgs);    
show("Log:\n"+RuntimeLog.globalLog);
}

public void failTest9() throws Exception {
String prog = "shown";
String input = prog+"{show !1; show !-1; show !0; show !-2;} ";    
byte[] bytecode = genCode(input);        
String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case        
runCode(prog, bytecode, commandLineArgs);    
show("Log:\n"+RuntimeLog.globalLog);
}

public void failTest10() throws Exception {
String prog = "shown";
String input = prog+"{show !1; show !-1; show !0; show !-2;} ";    
byte[] bytecode = genCode(input);        
String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case        
runCode(prog, bytecode, commandLineArgs);    
show("Log:\n"+RuntimeLog.globalLog);
}

//Retest2 Failed 7 Cases
//Failed Cases

	@Test
	public void declareAndAssign5() throws Exception {
		String prog = "fileLit";
		String input = prog + "{filename a; filename b; a := b;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	@Test
	public void failTest21() throws Exception {
	String prog = "shown";
	String input = prog+"{image y[300,400]; input y from @ 0;  show y;} ";    
	byte[] bytecode = genCode(input);        
	String[] commandLineArgs = {"C:\\Users\\Sakshi\\Desktop\\University of Florida\\Apple.jpg"}; //create command line argument array to initialize params, none in this case        
	runCode(prog, bytecode, commandLineArgs);    
	show("Log:\n"+RuntimeLog.globalLog);
//	assertEquals("entering main;-3.7;4.0;leaving main;",RuntimeLog.globalLog.toString());
	}
	@Test
	public void FailedTest1() throws Exception {
		String prog = "prog";
		String input = prog + "{show Z; show default_width; show default_height;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
	//	assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void FailedTest2() throws Exception {
		String prog = "sif";
		String input = prog + "{image y; image copy[128,256]; input y from @ 0 ; show y; copy := y; show copy;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"C:\\Users\\Sakshi\\Desktop\\University of Florida\\Apple.jpg"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
	//	assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	@Test
	public void FailedTest3() throws Exception {
		String prog = "prog";
		String input = prog + "{prog{filename f1;\\n filename f2; \\n input f1 from @ 0 ;\\n f2 := f1;}}  ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"C:\\Users\\Sakshi\\Desktop\\University of Florida\\Apple.jpg"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
	//	assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	@Test
	public void FailedTest4() throws Exception {
		String prog = "sif";
		String input = prog + "{image x; input x from @ 0 ; show x; image y; y := x; show y;}  ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"C:\\Users\\Sakshi\\Desktop\\University of Florida\\Apple.jpg"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
	//	assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	@Test
	public void FailedTest5() throws Exception {
		String prog = "sif";
		String input = prog + "{image y[1000,1000]; image copy[1000,1000]; input y from @ 0 ; show y; copy := y; show copy;}";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"C:\\Users\\Sakshi\\Desktop\\University of Florida\\Apple.jpg"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
	//	assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	@Test
	public void FailedTest6() throws Exception {
		String prog = "sif";
		String input = prog + "{int a; a := 123456789;\n show red(a); show green(a); show blue(a);} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
	//	assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	@Test
	public void FailedTest7() throws Exception {
		String prog = "sif";
		String input = prog + "{int a; a := 123456789; show alpha(a);\n a := -1; show alpha(a);} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
	//	assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}

//Assignment 6 Test Cases


/*
@Test
public void emptyProg() throws Exception {
	String prog = "emptyProg";	
	String input = prog + "{}";
	byte[] bytecode = genCode(input);
	String[] commandLineArgs = {};
	runCode(prog, bytecode, commandLineArgs);
	show("Log:\n "+RuntimeLog.globalLog);
	assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void integerLitShow() throws Exception {
	String prog = "intgegerLit";
	String input = prog + "{show 3;} ";	
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void floatLitShow() throws Exception {
	String prog = "floatLit";
	String input = prog + "{show 3.0;} ";	
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;3.0;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void booleanLitShow() throws Exception {
	String prog = "booleanLit";
	String input = prog + "{show true;} ";	
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void imageLitShow() throws Exception {
	String prog = "imageLit";
	String input = prog + "{image a; show a;} ";	
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void declaration0() throws Exception {
	String prog = "intLit";
	String input = prog + "{int a;} ";	
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void declaration1() throws Exception {
	String prog = "floatLit";
	String input = prog + "{float a;} ";	
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void declaration2() throws Exception {
	String prog = "booleanLit";
	String input = prog + "{boolean a;} ";	
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void declaration3() throws Exception {
	String prog = "imageLit";
	String input = prog + "{image a;} ";	
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void declaration4() throws Exception {
	String prog = "imageLit2";
	String input = prog + "{image a[3, 4];} ";	
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void declareAndAssign0() throws Exception {
	String prog = "booleanLit";
	String input = prog + "{int a; a := 2;} ";	
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void declareAndAssign1() throws Exception {
	String prog = "floatLit";
	String input = prog + "{float a; a := 2.0;} ";	
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void declareAndAssign2() throws Exception {
	String prog = "booleanLit";
	String input = prog + "{boolean a; a := true;} ";	
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void declareAndAssign3() throws Exception {
	String prog = "imageLit";
	String input = prog + "{image a; image b; a := b;} ";	
	System.out.println(input);
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void declareAndAssign4() throws Exception {
	String prog = "imageLit";
	String input = prog + "{image a[1,2]; image b[3,4]; a := b;} ";	
	System.out.println(input);
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void declareAndAssign5() throws Exception {
	String prog = "fileLit";
	String input = prog + "{filename a; filename b; a := b;} ";	
	System.out.println(input);
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void declareAndAssign6() throws Exception {
	String prog = "intLit";
	String input = prog + "{int a; int b; b := 5; a := b + 5; show a;} ";	
	System.out.println(input);
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;10;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void declareAndAssign7() throws Exception {
	String prog = "intFloatLit";
	String input = prog + "{float a; int b; b := 5; a := b + 5.0; show a;} ";	
	System.out.println(input);
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;10.0;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void declareAndAssign8() throws Exception {
	String prog = "intFloatLit";
	String input = prog + "{float a; float b; b := 5.0; a := b + 5;} ";	
	System.out.println(input);
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void declareAndAssign9() throws Exception {
	String prog = "intFloatLit";
	String input = prog + "{float a; float b; b := 5.0; a := b + 5.0;} ";	
	System.out.println(input);
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void declareAndAssign10() throws Exception {
	String prog = "intFloatLit";
	String input = prog + "{float a; float b; b := 5.0; a := b - 6.0; show a;} ";	
	System.out.println(input);
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;-1.0;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void declareAndAssign11() throws Exception {
	String prog = "intFloatLit";
	String input = prog + "{boolean a; boolean b; b := true; a := b & false;} ";	
	System.out.println(input);
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void declareAndAssign12() throws Exception {
	String prog = "intFloatLit";
	String input = prog + "{int a; int b; b := 10; a := b % 3;} ";	
	System.out.println(input);
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void declareAndAssign13() throws Exception {
	String prog = "intFloatLit";
	String input = prog + "{int a; int b; b := 10; a := b | 3;} ";	
	System.out.println(input);
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void declareAndAssign14() throws Exception {
	String prog = "intFloatLit";
	String input = prog + "{boolean a; boolean b; b := true; a := b | false;} ";	
	System.out.println(input);
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void declareAndAssign15() throws Exception {
	String prog = "intFloatLit";
	String input = prog + "{int a; int b; b := 5; a := b ** 2; show a;} ";	
	System.out.println(input);
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;25;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void declareAndAssign16() throws Exception {
	String prog = "intFloatLit";
	String input = prog + "{float a; float b; b := 5.5; a := b ** 2; show a;} ";	
	System.out.println(input);
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;30.25;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void declareAndAssign17() throws Exception {
	String prog = "intFloatLit";
	String input = prog + "{float a; float b; b := 5.5; a := b ** 2.1; show a;} ";	
	System.out.println(input);
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;35.872494;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void declareAndAssign18() throws Exception {
	String prog = "intFloatLit";
	String input = prog + "{float a; float b; b := 5.2; a := 2 ** b; show a;} ";	
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;36.758343;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void declareAndAssign19() throws Exception {
	String prog = "intFloatLit";
	String input = prog + "{float a; int b; b := 7; a := b / 2.0; show a;} ";	
	System.out.println(input);
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;3.5;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void sleep0() throws Exception {
	String prog = "sleepProgram";
	String input = prog + "{sleep 1000;} ";	
	System.out.println(input);
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void expressionUnary0() throws Exception {
	String prog = "unary";
	String input = prog + "{int a; a := !1; show a;} ";	
	System.out.println(input);
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;-2;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void expressionUnary1() throws Exception {
	String prog = "unary1";
	String input = prog + "{boolean a; a := !true; show a;} ";	
	System.out.println(input);
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void expressionUnary2() throws Exception {
	String prog = "unary1";
	String input = prog + "{int a; int b; b := 5; a := -b; show a;} ";	
	System.out.println(input);
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;-5;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void expressionPredefinedName0() throws Exception {
	String prog = "predef";
	String input = prog + "{int a; a := Z+5; show a;} ";	
	System.out.println(input);
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;260;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void expressionPredefinedName1() throws Exception {
	String prog = "predef";
	String input = prog + "{int a; a := default_height+default_width; show a;} ";	
	System.out.println(input);
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;2048;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void expressionFunctionAppWithExpressionArg0() throws Exception {
	String prog = "predef";
	String input = prog + "{int a; a := 5; show float(a);} ";	
	System.out.println(input);
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;5.0;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void expressionFunctionAppWithExpressionArg1() throws Exception {
	String prog = "predef";
	String input = prog + "{float a; a := 5.0; show int(a);} ";	
	System.out.println(input);
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;5;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void expressionFunctionAppWithExpressionArg2() throws Exception {
	String prog = "predef";
	String input = prog + "{float a; a := 180.0; show sin(a);} ";	
	System.out.println(input);
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;-0.80115265;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void expressionFunctionAppWithExpressionArg3() throws Exception {
	String prog = "predef";
	String input = prog + "{float a; a := -180.0; show abs(a);} ";	
	System.out.println(input);
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;180.0;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void expressionFunctionAppWithExpressionArg4() throws Exception {
	String prog = "predef";
	String input = prog + "{image a; show height(a);} ";	
	System.out.println(input);
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;1024;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void expressionFunctionAppWithExpressionArg5() throws Exception {
	String prog = "predef";
	String input = prog + "{image a; show width(a);} ";	
	System.out.println(input);
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;1024;leaving main;",RuntimeLog.globalLog.toString());
}


@Test
public void expressionFunctionAppWithExpressionArg6() throws Exception {
	String prog = "predef";
	String input = prog + "{image a[103, 103]; show width(a);} ";	
	System.out.println(input);
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;103;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void expressionFunctionAppWithExpressionArg71() throws Exception {
	String prog = "predef";
	String input = prog + "{int foo; foo := int(4.0); show foo;} ";	
	System.out.println(input);
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;4;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void lhsIdent01() throws Exception {
	String prog = "predef";
	String input = prog + "{image foo; image bar; foo := bar; show foo; sleep 1000;} ";	
	System.out.println(input);
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void lhsIdent11() throws Exception {
	String prog = "predef";
	String input = prog + "{int foo; int a; a := 5; foo := a; show foo;} ";	
	System.out.println(input);
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;5;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void statementInput01() throws Exception {
	String prog = "si";
	String input = prog + "{int a; input a from @ 0; show a;} ";	
	System.out.println(input);
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {"5", "5.0"}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;5;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void statementInput11() throws Exception {
	String prog = "si";
	String input = prog + "{float a; input a from @ 1; show a;} ";	
	System.out.println(input);
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {"5", "5.0"}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;5.0;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void statementInput21() throws Exception {
	String prog = "si";
	String input = prog + "{filename a; input a from @ 0;} ";	
	System.out.println(input);
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {"pic.png"}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void expressionIdent3() throws Exception {
	String prog = "sif";
	String input = prog + "{int a; a := 5; show a;} ";	
	System.out.println(input);
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {"pic.png"}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;5;leaving main;",RuntimeLog.globalLog.toString());
}

//Repeated Programs
*/
// int also checked
	
/*	
@Test
public void expressionBinaryEQ_int() throws Exception {
	String prog = "sif";
	String input = prog + "{show 1 == 1;} ";	
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void expressionBinaryEQ_boolean() throws Exception {
	String prog = "sif";
	String input = prog + "{show true == false;} ";	
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void expressionBinaryEQ_float0() throws Exception {
	String prog = "sif";
	String input = prog + "{show 1.0 == 1.0;} ";	
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
}


// to be done
@Test
public void expressionBinaryEQ_float() throws Exception {
	String prog = "sif";
	String input = prog + "{float a; a := 5.0; float b; b:= 5.0; boolean status; status := (a==b); show status;} ";	
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
}


@Test
public void expressionBinaryNEQ_int() throws Exception {
	String prog = "sif";
	String input = prog + "{show 1 != 2;} ";	
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void expressionBinaryNEQ_boolean() throws Exception {
	String prog = "sif";
	String input = prog + "{show true != true;} ";	
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void expressionBinaryNEQ_float() throws Exception {
	String prog = "sif";
	String input = prog + "{show 1.0 != 1.0;} ";	
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void expressionBinaryGT_int() throws Exception {
	String prog = "sif";
	String input = prog + "{show 2 > 1;} ";	
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void expressionBinaryGT_boolean() throws Exception {
	String prog = "sif";
	String input = prog + "{show true > false;} ";	
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void expressionBinaryGT_float() throws Exception {
	String prog = "sif";
	String input = prog + "{show 2.0 > 1.0;} ";	
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void expressionBinaryGE_int() throws Exception {
	String prog = "sif";
	String input = prog + "{show 2 >= 1;} ";	
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void expressionBinaryGE_boolean() throws Exception {
	String prog = "sif";
	String input = prog + "{show true >= false;} ";	
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void expressionBinaryGE_float() throws Exception {
	String prog = "sif";
	String input = prog + "{show 2.0 >= 1.0;} ";	
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void expressionBinaryLE_int() throws Exception {
	String prog = "sif";
	String input = prog + "{show 2 <= 1;} ";	
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void expressionBinaryLE_boolean() throws Exception {
	String prog = "sif";
	String input = prog + "{show true <= false;} ";	
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void expressionBinaryLE_float() throws Exception {
	String prog = "sif";
	String input = prog + "{show 2.0 <= 1.0;} ";	
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void expressionBinaryLT_int() throws Exception {
	String prog = "sif";
	String input = prog + "{int a; a := 2; boolean b; b := a < 1; show b;} ";	
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void expressionBinaryLT_boolean() throws Exception {
	String prog = "sif";
	String input = prog + "{show true < false;} ";	
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void expressionBinaryLT_float() throws Exception {
	String prog = "sif";
	String input = prog + "{show 2.0 < 1.0;} ";	
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void statementIf0() throws Exception {
	String prog = "sif";
	String input = prog + "{int a; a := 5; int b; b:= 5; if(a == b){ show 2;};} ";	
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;2;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void statementWhile0() throws Exception {
	String prog = "swhile";
	String input = prog + "{int a; a := 5; while(a >= 0){ show a; a := a - 1; }; } ";	
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
	assertEquals("entering main;5;4;3;2;1;0;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void functionApplicationWithExpressionArg0() throws Exception{
	String prog = "redfunc";
	String input = prog + "{int a; a := 123456789; show red(a); show green(a); show blue(a); }";
	byte[] bytecode = genCode(input);
	String[] cmdArgs = {};
	runCode(prog, bytecode, cmdArgs);
	show("Log:\n" + RuntimeLog.globalLog);
	assertEquals("entering main;91;205;21;leaving main;", RuntimeLog.globalLog.toString());
}

@Test
public void functionApplicationWithExpressionArg1() throws Exception{
	String prog = "redfunc";
	String input = prog + "{int a; a := 123456789; show alpha(a); a := -1; show alpha(a); }";
	byte[] bytecode = genCode(input);
	String[] cmdArgs = {};
	runCode(prog, bytecode, cmdArgs);
	show("Log:\n" + RuntimeLog.globalLog);
	assertEquals("entering main;7;255;leaving main;", RuntimeLog.globalLog.toString());
}

@Test
public void declareAndAssign181() throws Exception {
	String prog = "intFloatLit";
	String input = prog + "{image y; input y from @ 0 ; show y; sleep 1000;} ";	
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {"C:\\Users\\Sai.potamsetti\\eclipse-workspace\\PLPHomework\\src\\cop5556sp18\\pic.png"}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
//	assertEquals("entering main;36.758343;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void expressionFunctionAppWithPixel0() throws Exception {
	String prog = "intFloatLit";
	String input = prog + "{int res; res := cart_x[2.236068, 1.1071488]; show res;} ";	
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {""}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
 	assertEquals("entering main;1;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void expressionFunctionAppWithPixel1() throws Exception {
	String prog = "intFloatLit";
	String input = prog + "{int res; res := cart_y[2.236068, 1.1071488]; show res;} ";	
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {""}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
 	assertEquals("entering main;2;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void expressionFunctionAppWithPixel2() throws Exception {
	String prog = "intFloatLit";
	String input = prog + "{float res; res := polar_r[1, 2]; show res;} ";	
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {""}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
 	assertEquals("entering main;2.236068;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void expressionFunctionAppWithPixel3() throws Exception {
	String prog = "intFloatLit";
	String input = prog + "{float res; res := polar_a[1, 2]; show res;} ";	
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {""}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
 	assertEquals("entering main;1.1071488;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void expressioPixel0() throws Exception {
	String prog = "expressionPixel";
	String input = prog + "{image a; input a from @ 0; show width(a); show height(a); show red(a[1,2]);} ";	
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {"https://pbs.twimg.com/profile_images/948294484596375552/RyGNqDEM_400x400.jpg"}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
 	assertEquals("entering main;399;399;247;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void expressioPixel1() throws Exception {
	String prog = "expressionPixel";
	String input = prog + "{image a; input a from @ 0; a[1,2] := <<200, 200, 0, 255>>; } ";	
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {"https://pbs.twimg.com/profile_images/948294484596375552/RyGNqDEM_400x400.jpg"}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
 	assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void expressionSamplePixel1() throws Exception {
	String prog = "expressionPixel";
	String input = prog + "{image a; input a from @ 0; red(a[1,2]) := 255; show red(a[1,2]); } ";	
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {"https://pbs.twimg.com/profile_images/948294484596375552/RyGNqDEM_400x400.jpg"}; //create command line argument array to initialize params, none in this case		
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
 	assertEquals("entering main;255;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void expressioBinary0() throws Exception {
	String prog = "expressionPixel";
	String input = prog + "{show 1.5 < 3.4; } ";	
	
	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {""}; //create command line argument array to initialize params, none in this case		
	
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
 	assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void statementWrite0() throws Exception {
	String prog = "makeRedImage";
	String input = prog + " { image im[256,256]; int x; int y; filename dest; input dest from @ 0;  x := 0; y := 0; while (x < width(im)) { y := 0; while (y < height(im)) { im[x,y] := <<255,255,0,0>>; y := y+1; }; x := x+1; }; show im; sleep 4000; write im to dest; }";	

	byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {"red_image.png"}; //create command line argument array to initialize params, none in this case		
	
	runCode(prog, bytecode, commandLineArgs);	
	show("Log:\n"+RuntimeLog.globalLog);
 	//assertEquals("entering main;0;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void testDemo1() throws Exception {
	String prog = "demo1";
    String input = prog + " { \n" + "image h; \n" + "input h from @0; \n" + "show h; \n" + "sleep(4000); \n"
            + "image g[width(h),height(h)]; \n" + "int x; \n" + "x:=0; \n" + "while(x<width(g)){int y; \n"
            + "y:=0; \n" + "while(y<height(g)){g[x,y]:=h[y,x]; \n" + "y:=y+1; \n" + "}; \n" + "x:=x+1; \n" + "}; \n"
            + "show g; \n" + "sleep(4000); \n" + "}";
    byte[] bytecode = genCode(input);		
	String[] commandLineArgs = {"https://pbs.twimg.com/profile_images/948294484596375552/RyGNqDEM_400x400.jpg"};		
	
	runCode(prog, bytecode, commandLineArgs);
	show("Log:\n"+RuntimeLog.globalLog);
}

  @Test
    public void testPolarR2() throws Exception {
    	String prog = "PolarR2";
        String input = prog + " { \n" + "image im[1024,1024]; \n" + "int x; \n" + "x := 0; \n"
                + "while (x < width(im)) { \n" + "int y; \n" + "y := 0; \n" + "while (y < height(im)) { \n"
                + "float p; \n" + "p := polar_r[x,y]; \n" + "int r; \n" + "r := int(p) % Z; \n"
                + "im[x,y] := <<Z, 0, 0, r>>; \n" + "y := y+1; \n" + "}; \n" + "x := x + 1; \n" + "}; \n"
                + "show im; sleep(4000); \n" + "}";
        byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {""};		
		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		}
  
  
  @Test
    public void testSamples() throws Exception {
    	String prog = "samples";
    	String input = prog + " { \n" + "image bird; \n" + "input bird from @0; \n" + "show bird; \n"
                + "sleep(1000); \n" + "image bird2[width(bird),height(bird)]; \n" + "int x; \n" + "x:=0; \n"
                + "while(x<width(bird2)) {int y; \n" + "y:=0; \n"
                + "while(y<height(bird2)) {blue(bird2[x,y]):=red(bird[x,y]); \n"
                + "green(bird2[x,y]):=blue(bird[x,y]); \n" + "red(bird2[x,y]):=green(bird[x,y]); \n"
                + "alpha(bird2[x,y]):=Z; \n" + "y:=y+1; \n" + "}; \n" + "x:=x+       1; \n" + "}; \n" + "show bird2; \n"
                + "sleep(1000); \n" + "}";
    	 byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRr-Wyns9byAXGPhFp28TiviVwEbUS8IkbwRoUzmF1Wk4YbQMedkA"};		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		}
public void dummy() {
	//float a = (float)1.0;
	//float b = (float)1.0;
	
	int a = 2;
	int b = 3;
	
	if(a < b) {
		System.out.println("hola");
	}
}

*/	
//Test Cases from Ass2	
}