/**
 * Starter code with JUnit tests for code generation used in the class project in COP5556 Programming Language Principles 
 * at the University of Florida, Spring 2018.
 * 
 * This software is solely for the educational benefit of students 
 * enrolled in the course during the Spring 2018 semester.  
 * 
 * This software, and any software derived from it,  may not be shared with others or posted to public web sites,
 * either during the course or afterwards.
 * 
 *  @Beverly A. Sanders, 2018
 */


package cop5556sp18;

import static org.junit.Assert.*;

import java.awt.image.BufferedImage;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import javax.swing.JFrame;

import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import cop5556sp18.CodeGenUtils.DynamicClassLoader;
import cop5556sp18.Parser.SyntaxException;
import cop5556sp18.TypeChecker.SemanticException;
import cop5556sp18.AST.Program;

public class CodeGenTest {
	
	//determines whether show prints anything
	static boolean doPrint = true;
	
	static void show(Object s) {
		if (doPrint) {
			System.out.println(s);
		}
	}

	//determines whether a classfile is created
	static boolean doCreateFile = false;

	@Rule
	public ExpectedException thrown = ExpectedException.none();
	

	//values passed to CodeGenerator constructor to control grading and debugging output
	private boolean devel = true; //if true, print devel output
	private boolean grade = true; //if true, print grade output
	
//	private boolean devel = false; 
//	private boolean grade = false; 
	
	//sets the default width and height of newly created images.  Should be small enough to fit on screen.
	public static final int defaultWidth = 1024;
	public static final int defaultHeight = 1024;

	
	/**
	 * Generates bytecode for given input.
	 * Throws exceptions for Lexical, Syntax, and Type checking errors
	 * 
	 * @param input   String containing source code
	 * @return        Generated bytecode
	 * @throws Exception
	 */
	byte[] genCode(String input) throws Exception {
		
		//scan, parse, and type check
		Scanner scanner = new Scanner(input);
		show(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		Program program = parser.parse();
		TypeChecker v = new TypeChecker();
		program.visit(v, null);
//		show(program);  //It may be useful useful to show this here if code generation fails

		//generate code
		CodeGenerator cv = new CodeGenerator(devel, grade, null, defaultWidth, defaultHeight);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		show(program); //doing it here shows the values filled in during code gen
		//display the generated bytecode
		show(CodeGenUtils.bytecodeToString(bytecode));
		
		//write byte code to file 
		if (doCreateFile) {
			String name = ((Program) program).progName;
			String classFileName = "bin/" + name + ".class";
			OutputStream output = new FileOutputStream(classFileName);
			output.write(bytecode);
			output.close();
			System.out.println("wrote classfile to " + classFileName);
		}
		
		//return generated classfile as byte array
		return bytecode;
	}
	
	/**
	 * Run main method in given class
	 * 
	 * @param className    
	 * @param bytecode    
	 * @param commandLineArgs  String array containing command line arguments, empty array if none
	 * @throws + 
	 * @throws Throwable 
	 */
	void runCode(String className, byte[] bytecode, String[] commandLineArgs) throws Exception  {
		RuntimeLog.initLog(); //initialize log used for grading.
		DynamicClassLoader loader = new DynamicClassLoader(Thread.currentThread().getContextClassLoader());
		Class<?> testClass = loader.define(className, bytecode);
		@SuppressWarnings("rawtypes")
		Class[] argTypes = {commandLineArgs.getClass()};
		Method m = testClass.getMethod("main", argTypes );
		show("Output from " + m + ":");  //print name of method to be executed
		Object passedArgs[] = {commandLineArgs};  //create array containing params, in this case a single array.
		try {
		m.invoke(null, passedArgs);	
		}
		catch (Exception e) {
			Throwable cause = e.getCause();
			if (cause instanceof Exception) {
				Exception ec = (Exception) e.getCause();
				throw ec;
			}
			throw  e;
		}
	}
	

	/**
	 * When invoked from JUnit, Frames containing images will be shown and then immediately deleted.
	 * To prevent this behavior, waitForKey will pause until a key is pressed.
	 * 
	 * @throws IOException
	 */
	void waitForKey() throws IOException {
		System.out.println("enter any char to exit");
		System.in.read();
	}

	/**
	 * When invoked from JUnit, Frames containing images will be shown and then immediately deleted.
	 * To prevent this behavior, keepFrame will keep the frame visible for 5000 milliseconds.
	 * 
	 * @throws Exception
	 */
	void keepFrame() throws Exception {
		Thread.sleep(5000);
	}
	
	
	
	


	/**
	 * Since we are not doing any optimization, the compiler will 
	 * still create a class with a main method and the JUnit test will
	 * execute it.  
	 * 
	 * The only thing it will do is append the "entering main" and "leaving main" messages to the log.
	 * 
	 * @throws Exception
	 */
	@Test
	public void emptyProg() throws Exception {
		String prog = "emptyProg";	
		String input = prog + "{}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n "+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void integerLitShow() throws Exception {
		String prog = "intgegerLit";
		String input = prog + "{show 3;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void floatLitShow() throws Exception {
		String prog = "floatLit";
		String input = prog + "{show 3.0;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;3.0;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void booleanLitShow() throws Exception {
		String prog = "booleanLit";
		String input = prog + "{show true;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void imageLitShow() throws Exception {
		String prog = "imageLit";
		String input = prog + "{image a; show a;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declaration0() throws Exception {
		String prog = "intLit";
		String input = prog + "{int a;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declaration1() throws Exception {
		String prog = "floatLit";
		String input = prog + "{float a;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declaration2() throws Exception {
		String prog = "booleanLit";
		String input = prog + "{boolean a;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declaration3() throws Exception {
		String prog = "imageLit";
		String input = prog + "{image a;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declaration4() throws Exception {
		String prog = "imageLit2";
		String input = prog + "{image a[3, 4];} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign0() throws Exception {
		String prog = "booleanLit";
		String input = prog + "{int a; a := 2;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign1() throws Exception {
		String prog = "floatLit";
		String input = prog + "{float a; a := 2.0;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign2() throws Exception {
		String prog = "booleanLit";
		String input = prog + "{boolean a; a := true;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign3() throws Exception {
		String prog = "imageLit";
		String input = prog + "{image a; image b; a := b;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign4() throws Exception {
		String prog = "imageLit";
		String input = prog + "{image a[1,2]; image b[3,4]; a := b;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign5() throws Exception {
		String prog = "fileLit";
		String input = prog + "{filename a; filename b; a := b;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign6() throws Exception {
		String prog = "intLit";
		String input = prog + "{int a; int b; b := 5; a := b + 5; show a;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;10;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign7() throws Exception {
		String prog = "intFloatLit";
		String input = prog + "{float a; int b; b := 5; a := b + 5.0; show a;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;10.0;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign8() throws Exception {
		String prog = "intFloatLit";
		String input = prog + "{float a; float b; b := 5.0; a := b + 5;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign9() throws Exception {
		String prog = "intFloatLit";
		String input = prog + "{float a; float b; b := 5.0; a := b + 5.0;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign10() throws Exception {
		String prog = "intFloatLit";
		String input = prog + "{float a; float b; b := 5.0; a := b - 6.0; show a;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;-1.0;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign11() throws Exception {
		String prog = "intFloatLit";
		String input = prog + "{boolean a; boolean b; b := true; a := b & false;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign12() throws Exception {
		String prog = "intFloatLit";
		String input = prog + "{int a; int b; b := 10; a := b % 3;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign13() throws Exception {
		String prog = "intFloatLit";
		String input = prog + "{int a; int b; b := 10; a := b | 3;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign14() throws Exception {
		String prog = "intFloatLit";
		String input = prog + "{boolean a; boolean b; b := true; a := b | false;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign15() throws Exception {
		String prog = "intFloatLit";
		String input = prog + "{int a; int b; b := 5; a := b ** 2; show a;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;25;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign16() throws Exception {
		String prog = "intFloatLit";
		String input = prog + "{float a; float b; b := 5.5; a := b ** 2; show a;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;30.25;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign17() throws Exception {
		String prog = "intFloatLit";
		String input = prog + "{float a; float b; b := 5.5; a := b ** 2.1; show a;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;35.872494;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign18() throws Exception {
		String prog = "intFloatLit";
		String input = prog + "{float a; float b; b := 5.2; a := 2 ** b; show a;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;36.758343;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign19() throws Exception {
		String prog = "intFloatLit";
		String input = prog + "{float a; int b; b := 7; a := b / 2.0; show a;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;3.5;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void sleep0() throws Exception {
		String prog = "sleepProgram";
		String input = prog + "{sleep 1000;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionUnary0() throws Exception {
		String prog = "unary";
		String input = prog + "{int a; a := !1; show a;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;-2;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionUnary1() throws Exception {
		String prog = "unary1";
		String input = prog + "{boolean a; a := !true; show a;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionUnary2() throws Exception {
		String prog = "unary1";
		String input = prog + "{int a; int b; b := 5; a := -b; show a;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;-5;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionPredefinedName0() throws Exception {
		String prog = "predef";
		String input = prog + "{int a; a := Z+5; show a;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;260;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionPredefinedName1() throws Exception {
		String prog = "predef";
		String input = prog + "{int a; a := default_height+default_width; show a;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;2048;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionFunctionAppWithExpressionArg0() throws Exception {
		String prog = "predef";
		String input = prog + "{int a; a := 5; show float(a);} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;5.0;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionFunctionAppWithExpressionArg1() throws Exception {
		String prog = "predef";
		String input = prog + "{float a; a := 5.0; show int(a);} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;5;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionFunctionAppWithExpressionArg2() throws Exception {
		String prog = "predef";
		String input = prog + "{float a; a := 180.0; show sin(a);} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;-0.80115265;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionFunctionAppWithExpressionArg3() throws Exception {
		String prog = "predef";
		String input = prog + "{float a; a := -180.0; show abs(a);} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;180.0;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionFunctionAppWithExpressionArg4() throws Exception {
		String prog = "predef";
		String input = prog + "{image a; show height(a);} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;1024;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionFunctionAppWithExpressionArg5() throws Exception {
		String prog = "predef";
		String input = prog + "{image a; show width(a);} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;1024;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	
	@Test
	public void expressionFunctionAppWithExpressionArg6() throws Exception {
		String prog = "predef";
		String input = prog + "{image a[103, 103]; show width(a);} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;103;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionFunctionAppWithExpressionArg7() throws Exception {
		String prog = "predef";
		String input = prog + "{int foo; foo := int(4.0); show foo;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;4;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void lhsIdent0() throws Exception {
		String prog = "predef";
		String input = prog + "{image foo; image bar; foo := bar; show foo; sleep 1000;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void lhsIdent1() throws Exception {
		String prog = "predef";
		String input = prog + "{int foo; int a; a := 5; foo := a; show foo;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;5;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void statementInput0() throws Exception {
		String prog = "si";
		String input = prog + "{int a; input a from @ 0; show a;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"5", "5.0"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;5;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void statementInput1() throws Exception {
		String prog = "si";
		String input = prog + "{float a; input a from @ 1; show a;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"5", "5.0"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;5.0;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void statementInput2() throws Exception {
		String prog = "si";
		String input = prog + "{filename a; input a from @ 0;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"pic.png"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionIdent3() throws Exception {
		String prog = "sif";
		String input = prog + "{int a; a := 5; show a;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"pic.png"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;5;leaving main;",RuntimeLog.globalLog.toString());
	}

	// int also checked
	@Test
	public void expressionBinaryEQ_int() throws Exception {
		String prog = "sif";
		String input = prog + "{show 1 == 1;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionBinaryEQ_boolean() throws Exception {
		String prog = "sif";
		String input = prog + "{show true == false;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionBinaryEQ_float0() throws Exception {
		String prog = "sif";
		String input = prog + "{show 1.0 == 1.0;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	
	// to be done
	@Test
	public void expressionBinaryEQ_float() throws Exception {
		String prog = "sif";
		String input = prog + "{float a; a := 5.0; float b; b:= 5.0; boolean status; status := (a==b); show status;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	
	@Test
	public void expressionBinaryNEQ_int() throws Exception {
		String prog = "sif";
		String input = prog + "{show 1 != 2;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionBinaryNEQ_boolean() throws Exception {
		String prog = "sif";
		String input = prog + "{show true != true;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionBinaryNEQ_float() throws Exception {
		String prog = "sif";
		String input = prog + "{show 1.0 != 1.0;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionBinaryGT_int() throws Exception {
		String prog = "sif";
		String input = prog + "{show 2 > 1;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionBinaryGT_boolean() throws Exception {
		String prog = "sif";
		String input = prog + "{show true > false;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionBinaryGT_float() throws Exception {
		String prog = "sif";
		String input = prog + "{show 2.0 > 1.0;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionBinaryGE_int() throws Exception {
		String prog = "sif";
		String input = prog + "{show 2 >= 1;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionBinaryGE_boolean() throws Exception {
		String prog = "sif";
		String input = prog + "{show true >= false;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionBinaryGE_float() throws Exception {
		String prog = "sif";
		String input = prog + "{show 2.0 >= 1.0;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionBinaryLE_int() throws Exception {
		String prog = "sif";
		String input = prog + "{show 2 <= 1;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionBinaryLE_boolean() throws Exception {
		String prog = "sif";
		String input = prog + "{show true <= false;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionBinaryLE_float() throws Exception {
		String prog = "sif";
		String input = prog + "{show 2.0 <= 1.0;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionBinaryLT_int() throws Exception {
		String prog = "sif";
		String input = prog + "{int a; a := 2; boolean b; b := a < 1; show b;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionBinaryLT_boolean() throws Exception {
		String prog = "sif";
		String input = prog + "{show true < false;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionBinaryLT_float() throws Exception {
		String prog = "sif";
		String input = prog + "{show 2.0 < 1.0;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void statementIf0() throws Exception {
		String prog = "sif";
		String input = prog + "{int a; a := 5; int b; b:= 5; if(a == b){ show 2;};} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;2;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void statementWhile0() throws Exception {
		String prog = "swhile";
		String input = prog + "{int a; a := 5; while(a > 0){ a := 0; show a;}; } ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"success"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;0;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void functionApplicationWithExpressionArg0() throws Exception{
		String prog = "redfunc";
		String input = prog + "{int a; a := 123456789; show red(a); show green(a); show blue(a); }";
		byte[] bytecode = genCode(input);
		String[] cmdArgs = {};
		runCode(prog, bytecode, cmdArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;91;205;21;leaving main;", RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void functionApplicationWithExpressionArg1() throws Exception{
		String prog = "redfunc";
		String input = prog + "{int a; a := 123456789; show alpha(a); a := -1; show alpha(a); }";
		byte[] bytecode = genCode(input);
		String[] cmdArgs = {};
		runCode(prog, bytecode, cmdArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;7;255;leaving main;", RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign181() throws Exception {
		String prog = "intFloatLit";
		String input = prog + "{image y; input y from @ 0 ; show y; sleep 3000;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"https://pbs.twimg.com/profile_images/948294484596375552/RyGNqDEM_400x400.jpg"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
//		assertEquals("entering main;36.758343;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionFunctionAppWithPixel0() throws Exception {
		String prog = "intFloatLit";
		String input = prog + "{int res; res := cart_x[2.236068, 1.1071488]; show res;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {""}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
     	assertEquals("entering main;0;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionFunctionAppWithPixel1() throws Exception {
		String prog = "intFloatLit";
		String input = prog + "{int res; res := cart_y[2.236068, 1.1071488]; show res;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {""}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
     	assertEquals("entering main;2;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionFunctionAppWithPixel2() throws Exception {
		String prog = "intFloatLit";
		String input = prog + "{float res; res := polar_r[1, 2]; show res;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {""}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
     	assertEquals("entering main;2.236068;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionFunctionAppWithPixel3() throws Exception {
		String prog = "intFloatLit";
		String input = prog + "{float res; res := polar_a[1, 2]; show res;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {""}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
     	assertEquals("entering main;1.1071488;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressioPixel0() throws Exception {
		String prog = "expressionPixel";
		String input = prog + "{image a; input a from @ 0; show width(a); show height(a); show red(a[1,2]);} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"https://pbs.twimg.com/profile_images/948294484596375552/RyGNqDEM_400x400.jpg"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
     	assertEquals("entering main;399;399;247;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressioPixel1() throws Exception {
		String prog = "expressionPixel";
		String input = prog + "{image a; input a from @ 0; a[1,2] := <<200, 200, 0, 255>>; } ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"https://pbs.twimg.com/profile_images/948294484596375552/RyGNqDEM_400x400.jpg"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
     	assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionSamplePixel1() throws Exception {
		String prog = "expressionPixel";
		String input = prog + "{image a; input a from @ 0; show a; sleep 1000; } ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"https://pbs.twimg.com/profile_images/948294484596375552/RyGNqDEM_400x400.jpg"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
     	//assertEquals("entering main;255;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressioBinary0() throws Exception {
		String prog = "expressionPixel";
		String input = prog + "{show 1.5 < 3.4; } ";	
		
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {""}; //create command line argument array to initialize params, none in this case		
		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
     	assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void statementWrite0() throws Exception {
		String prog = "makeRedImage";
		String input = prog + " { image im[256,256]; int x; int y; filename dest; input dest from @ 0;  x := 0; y := 0; while (x < width(im)) { y := 0; while (y < height(im)) { im[x,y] := <<255,255,0,0>>; y := y+1; }; x := x+1; }; show im; sleep 4000; write im to dest; }";	
	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"red_image.png"}; //create command line argument array to initialize params, none in this case		
		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
     	//assertEquals("entering main;0;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
    public void testDemo1() throws Exception {
		String prog = "demo1";
        String input = prog + " { \n" + "image h; \n" + "input h from @0; \n" + "show h; \n" + "sleep(4000); \n"
                + "image g[width(h),height(h)]; \n" + "int x; \n" + "x:=0; \n" + "while(x<width(g)){int y; \n"
                + "y:=0; \n" + "while(y<height(g)){g[x,y]:=h[y,x]; \n" + "y:=y+1; \n" + "}; \n" + "x:=x+1; \n" + "}; \n"
                + "show g; \n" + "sleep(4000); \n" + "}";
        byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"https://pbs.twimg.com/profile_images/948294484596375552/RyGNqDEM_400x400.jpg"};		
		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
    }

	  @Test
	    public void testPolarR2() throws Exception {
	    	String prog = "PolarR2";
	        String input = prog + " { \n" + "image im[1024,1024]; \n" + "int x; \n" + "x := 0; \n"
	                + "while (x < width(im)) { \n" + "int y; \n" + "y := 0; \n" + "while (y < height(im)) { \n"
	                + "float p; \n" + "p := polar_r[x,y]; \n" + "int r; \n" + "r := int(p) % Z; \n"
	                + "im[x,y] := <<Z, 0, 0, r>>; \n" + "y := y+1; \n" + "}; \n" + "x := x + 1; \n" + "}; \n"
	                + "show im; sleep(4000); \n" + "}";
	        byte[] bytecode = genCode(input);		
  		String[] commandLineArgs = {""};		
  		
  		runCode(prog, bytecode, commandLineArgs);	
  		show("Log:\n"+RuntimeLog.globalLog);
  		}
	  
	  
	  @Test
	    public void testSamples() throws Exception {
	    	String prog = "samples";
	    	String input = prog + " { \n" + "image bird; \n" + "input bird from @0; \n" + "show bird; \n"
	                + "sleep(1000); \n" + "image bird2[width(bird),height(bird)]; \n" + "int x; \n" + "x:=0; \n"
	                + "while(x<width(bird2)) {int y; \n" + "y:=0; \n"
	                + "while(y<height(bird2)) {blue(bird2[x,y]):=red(bird[x,y]); \n"
	                + "green(bird2[x,y]):=blue(bird[x,y]); \n" + "red(bird2[x,y]):=green(bird[x,y]); \n"
	                + "alpha(bird2[x,y]):=Z; \n" + "y:=y+1; \n" + "}; \n" + "x:=x+       1; \n" + "}; \n" + "show bird2; \n"
	                + "sleep(1000); \n" + "}";
	    	 byte[] bytecode = genCode(input);		
   		String[] commandLineArgs = {"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRr-Wyns9byAXGPhFp28TiviVwEbUS8IkbwRoUzmF1Wk4YbQMedkA"};		
   		runCode(prog, bytecode, commandLineArgs);	
   		show("Log:\n"+RuntimeLog.globalLog);
   		}
	  
	  @Test
	  public void FailedTest1() throws Exception {
	  	String   writeImageToFile = "writeImageToFile";
	      String input = "writeImageToFile{image y;\n filename f;\n input y from @ 0 ; input f from @1; \n show y; write y to f;}";
	    		  
	    		
	      byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"https://pbs.twimg.com/profile_images/948294484596375552/RyGNqDEM_400x400.jpg","newcat.jpg", "2"};		
		
		runCode(writeImageToFile, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
//			assertEquals("entering main;7;255;leaving main;",RuntimeLog.globalLog.toString());
		}
		
		@Test
	  public void FailedTest2() throws Exception {
	  	String prog = "prog";
	      String input = "prog{image y[20,20]; "
	      		+ "show y[12,14]; "
	      		+ "y[12,14] := 1234567890; "
	      		+ "show y[12,14];"
	      		+ "}";
	      byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {""};		
		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
//			assertEquals("entering main;7;255;leaving main;",RuntimeLog.globalLog.toString());
		}
		
		@Test
	  public void FailedTest3() throws Exception {
	  	String prog = "prog";
	      String input =  "prog{image y[20,20]; show y[12,20]; y[12,20] := 1234567890; show y[12,20];}";
	      byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {""};		
		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
//			assertEquals("entering main;7;255;leaving main;",RuntimeLog.globalLog.toString());
		}
		
		
		//Test case bit altered to  braek in segments
		
		//Chk the test case again 
		@Test
	  public void FailedTest4() throws Exception {
	  	String writeTransparentImage = "writeTransparentImage";
	      String input ="writeTransparentImage{ image im[256,256]; \nfilename f; \ninput f from @0; \nint x;\n int y; \nx := 0; \ny := 0; \nwhile (x < width(im)){ \n y := 0; while (y < height(im)){\nim[x,y] := <<15,255,0,0>>;\nint z; z := im[x,y];y := y + 1; \n};\nx := x + 1;};\nwrite im to f;}"; 
	      byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"C:\\Users\\Sakshi\\Desktop\\University of Florida\\flower.jpg"};		
		
		runCode(writeTransparentImage, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
//			assertEquals("entering main;7;255;leaving main;",RuntimeLog.globalLog.toString());
		}
		
		
		//Bit altered for segments
		@Test
	  public void FailedTest5() throws Exception {
	  	String  blockScope= "blockScope";
	      String input =  "blockScope{int x; x:=5; if(true){ int x; x := 6; show x; }; show x;}";
	      byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {""};		
		
		runCode(blockScope, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
//			assertEquals("entering main;7;255;leaving main;",RuntimeLog.globalLog.toString());
		}
		
		
		//Altered a bit
		@Test
	  public void FailedTest6() throws Exception {
		  	String blockScope = "blockScope";
		      String input =  "blockScope{ if(true){ int x; }; int x; x := 5; show x;}";
		      byte[] bytecode = genCode(input);		
			String[] commandLineArgs = {""};		
			
			runCode(blockScope, bytecode, commandLineArgs);	
			show("Log:\n"+RuntimeLog.globalLog);
//				assertEquals("entering main;7;255;leaving main;",RuntimeLog.globalLog.toString());
			}
	 
		@Test
	  public void FailedTest7() throws Exception {
		  	String blockScope = "blockScope";
		      String input =  "blockScope{ int x; x := 5; \nif(true) { \n   int x; x := 6; \n   if(false) { \n      int x; x := 7; int y; \n   }; \n   show x; \n}; \nshow x; }";
		      byte[] bytecode = genCode(input);		
			String[] commandLineArgs = {""};		
			
			runCode(blockScope, bytecode, commandLineArgs);	
			show("Log:\n"+RuntimeLog.globalLog);
//				assertEquals("entering main;7;255;leaving main;",RuntimeLog.globalLog.toString());
			}
		
		@Test
	  public void FailedTest8() throws Exception {
		  	String prog = "prog";
		      String input =  "prog{image y; image copy[128,256]; input y from @ 0 ; show y; copy := y; show copy;} ";
		      byte[] bytecode = genCode(input);		
			String[] commandLineArgs = {"https://pbs.twimg.com/profile_images/948294484596375552/RyGNqDEM_400x400.jpg"};		
			
			runCode(prog, bytecode, commandLineArgs);	
			show("Log:\n"+RuntimeLog.globalLog);
//				assertEquals("entering main;7;255;leaving main;",RuntimeLog.globalLog.toString());
			}
	  
		@Test
	  public void FailedTest9() throws Exception {
		  	String prog = "prog";
		      String input =  "prog{ red (var) := 255;}";
		      byte[] bytecode = genCode(input);		
			String[] commandLineArgs = {""};		
			
		runCode(prog, bytecode, commandLineArgs);	
			show("Log:\n"+RuntimeLog.globalLog);
				assertEquals("entering main;7;255;leaving main;",RuntimeLog.globalLog.toString());
			}
	  
		
		//Alrered a bit on opening braces in all the cases
		@Test
	  public void FailedTest10() throws Exception {
		  	String lhssample = "lhssample";
		      String input =  "lhssample{ image im[512,256]; int x;\n int y; \nx := 0; \ny := 0; \nwhile (x < width(im)){ \n y := 0; while (y < height(im)){\nalpha(im[x,y]) := 255;\nred(im[x,y]) := 0;    		  \ngreen(im[x,y]) := x+y;\nblue(im[x,y]) := 0; \ny := y + 1; \n};\nx := x + 1;};\nshow im;\n}";
		      byte[] bytecode = genCode(input);		
			String[] commandLineArgs = {""};		
			
			runCode(lhssample, bytecode, commandLineArgs);	
			show("Log:\n"+RuntimeLog.globalLog);
//				assertEquals("entering main;7;255;leaving main;",RuntimeLog.globalLog.toString());
			}
	  
		@Test
	  public void FailedTest11() throws Exception {
		  	String writeModifiedImage = "writeModifiedImage";
		      String input = "writeModifiedImage{ image im; \ninput im from @0; \nfilename f; \ninput f from @1; \nint x;\n int y; \nx := 0; \ny := 0; \nwhile (x < width(im)){ \n y := 0; while (y < height(im)){\nim[x,y] := <<15,255,0,0>>; 		  \nint z; z := im[x,y];y := y + 1; \n};\nx := x + 1;};\nwrite im to f;\n}";
		      byte[] bytecode = genCode(input);		
			String[] commandLineArgs = {"C:\\Users\\Sakshi\\Desktop\\University of Florida\\flower.jpg", "C:\\Users\\Sakshi\\Desktop\\University of Florida\\flower.jpg"};		
			
			runCode(writeModifiedImage, bytecode, commandLineArgs);	
			show("Log:\n"+RuntimeLog.globalLog);
//				assertEquals("entering main;7;255;leaving main;",RuntimeLog.globalLog.toString());
			}
	  
		@Test
		  public void FailedTest12() throws Exception {
			  	String colorExpressions2 = "colorExpressions2";
			      String input =  "colorExpressions2{ image im[512,256]; int x;\n int y; \nx := 0; \ny := 0; \nwhile (x < width(im)){ \n y := 0; while (y < height(im)){\nim[x,y] := <<255,0,x+y,0>>; 		  \ny := y + 1; \n};\nx := x + 1;};\nshow im;\n}";
			      byte[] bytecode = genCode(input);		
				String[] commandLineArgs = {""};		
				
				runCode(colorExpressions2, bytecode, commandLineArgs);	
				show("Log:\n"+RuntimeLog.globalLog);
//					assertEquals("entering main;7;255;leaving main;",RuntimeLog.globalLog.toString());
				}
		
		@Test
	  public void FailedTest13() throws Exception {
		  	String writeRedImage = "writeRedImage";
		      String input =    "writeRedImage{ image im[256,256]; \nfilename f; \ninput f from @0; \nint x;\n int y; \nx := 0; \ny := 0; \nwhile (x < width(im)){ \n y := 0; while (y < height(im)){\nim[x,y] := <<255,255,0,0>>; \nint z;		   z := im[x,y];y := y + 1; \n};\nx := x + 1;};\nwrite im to f;\n}";
		      byte[] bytecode = genCode(input);		
			String[] commandLineArgs = {"C:\\Users\\Sakshi\\Desktop\\University of Florida\\flower.jpg"};		
			
			runCode(writeRedImage, bytecode, commandLineArgs);	
			show("Log:\n"+RuntimeLog.globalLog);
//				assertEquals("entering main;7;255;leaving main;",RuntimeLog.globalLog.toString());
			}
	  

	  
		@Test
	  public void FailedTest14() throws Exception {
		  	String prog = "prog";
		      String input = "prog{image x; input x from @ 0 ; show x; image y; y := x; show y;} ";
		      byte[] bytecode = genCode(input);		
			String[] commandLineArgs = {"https://pbs.twimg.com/profile_images/948294484596375552/RyGNqDEM_400x400.jpg"};		
			
			runCode(prog, bytecode, commandLineArgs);	
			show("Log:\n"+RuntimeLog.globalLog);
//				assertEquals("entering main;7;255;leaving main;",RuntimeLog.globalLog.toString());
			}
	 
		@Test
	  public void FailedTest15() throws Exception {
		  	String prog = "prog";
		      String input =  "prog{image y[1000,1000]; "
		      		+ "image copy[1000,1000]; "
		      		+ "input y from @ 0 ; "
		      		+ "show y; "
		      		+ "copy := y; "
		      		+ "show copy;"
		      		+ "} ";
		      byte[] bytecode = genCode(input);		
			String[] commandLineArgs = {"https://pbs.twimg.com/profile_images/948294484596375552/RyGNqDEM_400x400.jpg"};		
			
			runCode(prog, bytecode, commandLineArgs);	
			show("Log:\n"+RuntimeLog.globalLog);
//				assertEquals("entering main;7;255;leaving main;",RuntimeLog.globalLog.toString());
			}
	 
		@Test
	    public void failTest168() throws Exception {
	        String prog = "shown";
	        String input = prog+"{int s; s:=3; while(s<5) { s:=s+1; show s;};}";    
	        byte[] bytecode = genCode(input);        
	        String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case        
	        runCode(prog, bytecode, commandLineArgs);    
	        show("Log:\n"+RuntimeLog.globalLog);
	        //assertEquals("entering main;;leaving main;",RuntimeLog.globalLog.toString());
	    
		}
		
			/*
			"writeImageToFile{image y;\n filename f;\n input y from @ 0 ; input f from @1; \n show y; write y to f;}"
			"prog{image y[20,20]; show y[12,14]; y[12,14] := 1234567890; show y[12,14];}"
			"prog{image y[20,20]; show y[12,20]; y[12,20] := 1234567890; show y[12,20];}"
			"writeTransparentImage{ image im[256,256]; \nfilename f; \ninput f from @0; \nint x;\n int y; \nx := 0; \ny := 0; \nwhile (x < width(im)){ \n y := 0; while (y < height(im)){\nim[x,y] := <<15,255,0,0>>;
			 \nint z; z := im[x,y];y := y + 1; \n};\nx := x + 1;};\nwrite im to f;}"
			 ""
			 "blockScope{if(true){ int x; }; int x; x := 5; show x;}"
			 "blockScope{ int x; x := 5; \nif(true) { \n   int x; x := 6; \n   if(false) { \n      int x; x := 7; int y; \n   }; \n   show x; \n}; \nshow x; }"
			 "prog{image y; image copy[128,256]; input y from @ 0 ; show y; copy := y; show copy;} "
			 "prog{ red (var) := 255;}"
			 "lhssample{ image im[512,256]; int x;\n int y; \nx := 0; \ny := 0; \nwhile (x < width(im)){ \n y := 0; while (y < height(im)){\nalpha(im[x,y]) := 255;\nred(im[x,y]) := 0;
			 \ngreen(im[x,y]) := x+y;\nblue(im[x,y]) := 0; \ny := y + 1; \n};\nx := x + 1;};\nshow im;\n}"
			"writeModifiedImage{ image im; \ninput im from @0; \nfilename f; \ninput f from @1; \nint x;\n int y; \nx := 0; \ny := 0; \nwhile (x < width(im)){ \n y := 0; while (y < height(im)){\nim[x,y] := <<15,255,0,0>>;
			 \nint z; z := im[x,y];y := y + 1; \n};\nx := x + 1;};\nwrite im to f;\n}"
			 "colorExpressions2{ image im[512,256]; int x;\n int y; \nx := 0; \ny := 0; \nwhile (x < width(im)){ \n y := 0; while (y < height(im)){\nim[x,y] := <<255,0,x+y,0>>;
			  \ny := y + 1; \n};\nx := x + 1;};\nshow im;\n}"
			  "writeRedImage{ image im[256,256]; \nfilename f; \ninput f from @0; \nint x;\n int y; \nx := 0; \ny := 0; \nwhile (x < width(im)){ \n y := 0; while (y < height(im)){\nim[x,y] := <<255,255,0,0>>; \nint z;
			   z := im[x,y];y := y + 1; \n};\nx := x + 1;};\nwrite im to f;\n}"
			   "prog{image x; input x from @ 0 ; show x; image y; y := x; show y;} "
			   "prog{image y[1000,1000]; image copy[1000,1000]; input y from @ 0 ; show y; copy := y; show copy;} "
			   */
	public void dummy() {
		//float a = (float)1.0;
		//float b = (float)1.0;
		
		int a = 2;
		int b = 3;
		
		if(a > b) {
			System.out.println("hola");
		}
	}
	
	
//	@Test
//	public void emptyProg() throws Exception {
//		String prog = "emptyProg";	
//		String input = prog + "{}";
//		byte[] bytecode = genCode(input);
//		String[] commandLineArgs = {};
//		runCode(prog, bytecode, commandLineArgs);
//		show("Log:\n "+RuntimeLog.globalLog);
//		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
//	}
	

	
//	@Test
//	public void integerLit() throws Exception {
//		String prog = "integerLit";
//		String input = prog + "{show 3;} ";	
//		byte[] bytecode = genCode(input);		
//		String[] commandLineArgs = {};		
//		runCode(prog, bytecode, commandLineArgs);	
//		show("Log:\n"+RuntimeLog.globalLog);
//		assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());
//	}
	
	@Test
	public void booleanLit() throws Exception {
		String prog = "booleanLit";
		String input = prog + "{show true;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void floatLit() throws Exception {
		String prog = "floatLit";
		String input = prog + "{show 3.5;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;3.5;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void statementAssignInt() throws Exception {
		String prog = "statementAssignInt";
		String input = prog + "{int a; a:=10;show a;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;10;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void statementAssignFloat() throws Exception {
		String prog = "statementAssignFloat";
		String input = prog + "{float a; a:=10.5;show a;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;10.5;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void statementAssignBoolean() throws Exception {
		String prog = "statementAssignBoolean";
		String input = prog + "{boolean a; a:=true;show a;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void statementAssignImage() throws Exception {
		String prog = "statementAssignImage";
		String input = prog + "{image a;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void statementInputInt() throws Exception {
		String prog = "statementInputInt";
		String input = prog + "{int a; input a from @ 0; show a;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"1", "2"};		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;1;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void statementInputFloat() throws Exception {
		String prog = "statementInputFloat";
		String input = prog + "{float a; input a from @ 0; show a;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"10.10", "1.0"};		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;10.1;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void statementInputImageUrl() throws Exception {
		String prog = "statementInputImageUrl";
		String input = prog + "{image gator[200,125]; input gator from @ 1; show gator;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"10.10", "http://identity.ufl.edu/wp-content/uploads/2015/10/gatorhead.gif"};		
		runCode(prog, bytecode, commandLineArgs);
		keepFrame();
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void statementInputImageUrlComplex() throws Exception {
		String prog = "statementInputImageUrlComplex";
		String input = prog + "{image a[1, 300]; image gator[100*2,height(a)]; input gator from @ 1; show gator;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"10.10", "http://athenaposters.ca/wp-content/uploads/2017/01/2400-61382-Nasa-NGC-6357-200x300.jpg"};		
		runCode(prog, bytecode, commandLineArgs);
		keepFrame();
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void visitExpressionFunctionAppWithExpressionArg() throws Exception {
		String prog = "visitExpressionFunctionAppWithExpressionArgWidth";
		String input = prog + "{image a[1, 300]; show width(a); show height(a);} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;1;300;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionBinaryTimesInt1() throws Exception {
		String prog = "expressionBinaryTimesInt1";
		String input = prog + "{show 2*6;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;12;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void readFromCommandLine() throws Exception {
		String prog = "readFromCommandLine";
		String input = prog + "{int x; input x from @ 0 ; show x;"
				+ "float y; input y from @ 1; show y;"
				+ "boolean z; input z from @ 2; show z;"
				+ "input z from @ 3; show z;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"2", "1.5", "true", "false"};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;2;1.5;true;false;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void readImageFromCommandLine() throws Exception {
		String prog = "readImageFromCommandLine";
		String input = prog + "{image y; input y from @ 0 ; show y;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"https://docs.microsoft.com/en-us/windows/uwp/design/controls-and-patterns/images/image_licorice.jpg"};		
		runCode(prog, bytecode, commandLineArgs);
		keepFrame();
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testBinary4() throws Exception {
		String prog = "testBinary4";
		String input = prog + "{show 9.1 + 4;show 9.1 - 4;show 9.1 * 4;show 8.2 / 4;show 9.1 ** 4;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;13.1;5.1000004;36.4;2.05;6857.497;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void assignImageWithDifferentSize() throws Exception {
		String prog = "assignImageWithDifferentSize";
		String input = prog + "{image y; image copy[128,256]; input y from @ 0 ; show y; copy := y; show copy;} ";
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"https://lh3.googleusercontent.com/BqpmHasRBSWph9TMnUZfrCSpgh0zIAeJ_Dl7UBKirSSL7J6y1PE-AMUprBDuEF1NM0DMrSP_Vjzmp87s1Pm0lg"};		
		runCode(prog, bytecode, commandLineArgs);
		keepFrame();
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionFuncArg3() throws Exception {
		String prog = "testExpressionFuncArg3";
		String input =  prog + "{int a; a := 123456789;"
				+ "show red(a); show green(a); show blue(a);}";
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;91;205;21;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void assignImage1() throws Exception {
		String prog = "assignImage1";
		String input = prog + "{image x; input x from @ 0 ; show x; image y; y := x; show y;} ";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"https://www.nasa.gov/sites/default/files/styles/image_card_4x3_ratio/public/thumbnails/image/iss044e045542_1.jpg"};		
		runCode(prog, bytecode, commandLineArgs);
		keepFrame();
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void assignImage2() throws Exception {
		String prog = "assignImage2";
		String input = prog + "{image y[1000,1000]; image copy[1000,1000]; input y from @ 0 ; show y; copy := y; show copy;} ";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"http://cdn-image.foodandwine.com/sites/default/files/1509031600/arugua-and-squash-salad-XL-RECIPE1217.jpg"};		
		runCode(prog, bytecode, commandLineArgs);
		keepFrame();
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionFuncArg4() throws Exception {
		String prog = "testExpressionFuncArg4";
		String input = prog + "{int a; a := 123456789; show alpha(a);"
				+ "a := -1; show alpha(a);}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;7;255;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionFuncArg5() throws Exception {
		String prog = "testExpressionFuncArg5";
		String input = prog + "{float a; a := float(-3.7); show a; a := float(4); show a;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;-3.7;4.0;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionFuncArg6() throws Exception {
		String prog = "testExpressionFuncArg6";
		String input =  prog + "{int a; a := int(-3.7); show a; a := int(4); show a;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;-3;4;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void createDefaultSizeImage() throws Exception {
		String prog = "createDefaultSizeImage";
		String input = prog + "{image x; input x from @ 0 ; show x; image y; y := x; show y;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"https://www.nasa.gov/sites/default/files/styles/image_card_4x3_ratio/public/thumbnails/image/pia20027_updated.jpg"};		
		runCode(prog, bytecode, commandLineArgs);
		keepFrame();
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void createNonDefaultSizeImage() throws Exception {
		String prog = "createNonDefaultSizeImage";
		String input = prog + "{image y[512,256];show y;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		keepFrame();
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testStatementWrite() throws Exception {
		String prog = "testStatementWrite";
		String input =  prog + "{image a; input a from @ 0 ;filename b; input b from @ 1 ;write a to b;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"https://explorewesternmass.com/wp-content/uploads/2018/01/farm-table-chicken-400x300.jpg","C:\\Users\\Sakshi\\Desktop\\University of Florida\\flower.jpg"};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionPredefinedName() throws Exception {
		String prog = "testExpressionPredefinedName";
		String input =  prog + "{show Z; show default_width; show default_height;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;255;1024;1024;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testBinary1() throws Exception {
		String prog = "testBinary1";
		String input =  prog + "{show 9 + 4;show 9 - 4;show 9 * 4;show 9 / 4;show 9 ** 4;show 9 % 4;show 9 & 4;show 9 | 4;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;13;5;36;2;6561;1;0;13;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testBinary2() throws Exception {
		String prog = "testBinary2";
		String input =  prog + "{show 9.1 + 4.5;show 9.1 - 4.5;show 9.1 * 4.5;show 8.82 / 4.2;show 9.1 ** 4.1;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;13.6;4.6000004;40.95;2.1;8552.039;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testBinary3() throws Exception {
		String prog = "testBinary3";
		String input =  prog + "{show 9 + 4.5;show 9 - 4.5;show 9 * 4.5;show 8 / 4.2;show 9 ** 4.1;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;13.5;4.5;40.5;1.904762;8173.239;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void sleepProgram() throws Exception {
		String prog = "sleepProgram";
		String input =  prog + "{sleep 2000;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void unaryOpNot1() throws Exception {
		String prog = "unaryOpNot1";
		String input =  prog + "{show !false; show !true; show !(true | false); show !(true & false);}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;false;false;true;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void unaryOpNot2() throws Exception {
		String prog = "unaryOpNot2";
		String input =  prog + "{show !1; show !-1; show !0; show !-2;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;-2;0;-1;1;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAssignBoolean() throws Exception {
		String prog = "declareAssignBoolean";
		String input =  prog + "{boolean y; y := true; show y; y := false; show y;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;false;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign25() throws Exception {
		String prog = "intFloatLit";
		String input = prog
				+ "{image b[512,256]; show width(b); show height(b);image c;show width(c); show height(c);}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {}; // create
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;512;256;1024;1024;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void assignFile() throws Exception {
		String prog = "assignFile";
		String input = prog
				+ "{filename f1;filename f2;input f1 from @ 0 ;f2 := f1;}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {"G:\\Courses\\Spring 18\\PLP\\workspace\\PLPHomework\\src\\cop5556sp18\\farm-table-chicken.png"}; // create
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void unaryOpMinus() throws Exception {
		String prog = "unaryOpMinus";
		String input = prog
				+ "{show -3; show -4.5; show -3-4.5;}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {"G:\\Courses\\Spring 18\\PLP\\workspace\\PLPHomework\\src\\cop5556sp18\\farm-table-chicken.png"}; // create
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;-3;-4.5;-7.5;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void readImageFromCommandLineAndScale() throws Exception {
		String prog = "readImageFromCommandLineAndScale";
		String input = prog
				+ "{image y[300,400];input y from @ 0 ;show y;}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {"https://showmetheyummy.com/wp-content/uploads/2016/12/Chewy-Ginger-Cookies-Show-Me-the-Yummy-6.jpg"};
		runCode(prog, bytecode, commandLineArgs);
		keepFrame();
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAssignFloat() throws Exception {
		String prog = "declareAssignFloat";
		String input = prog
				+ "{float y; y := 6.6; show y; y := -0.5; show y;}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {"G:\\Courses\\Spring 18\\PLP\\workspace\\PLPHomework\\src\\cop5556sp1.images\\farm-table-chicken.png"}; // create
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;6.6;-0.5;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionFuncArg1() throws Exception {
		String prog = "testExpressionFuncArg1";
		String input = prog
				+ "{image b[512,256]; show width(b); show height(b);image c; show width(c); show height(c);}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;512;256;1024;1024;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionFuncArg2() throws Exception {
		String prog = "testExpressionFuncArg2";
		String input = prog
				+ "{show abs(1); show abs(-1); show abs(5.3); show abs(-5.3); show abs(1-5.3);}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;1;1;5.3;5.3;4.3;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionFuncArg7() throws Exception {
		String prog = "testExpressionFuncArg7";
		String input = prog
				+ "{show sin(10.0); show cos(-10.0);}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;-0.5440211;-0.8390715;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionFuncArg8() throws Exception {
		String prog = "testExpressionFuncArg8";
		String input = prog
				+ "{show log(1.0); show atan(0.5);}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;0.0;0.4636476;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testAssociativityPrecedence2() throws Exception {
		String prog = "testAssociativityPrecedence2";
		String input = prog
				+ "{show 1 --2 * 3 & 14;}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;6;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testAssociativityPrecedence4() throws Exception {
		String prog = "testAssociativityPrecedence4";
		String input = prog
				+ "{show 4 * 3 * 2;}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;24;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAssignInteger() throws Exception {
		String prog = "declareAssignInteger";
		String input = prog
				+ "{int y; y := 55; show y; y := -234; show y;}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;55;-234;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign23() throws Exception {
		String prog = "declareAndAssign23";
		String input = prog
				+ "{image y[300,400];input y from @ 0 ;show y;} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = { "http://www.stagandlion.com/wp-content/uploads/2015/04/small-food.jpg"};
		runCode(prog, bytecode, commandLineArgs);
		keepFrame();
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign24() throws Exception {
		String prog = "declareAndAssign24";
		String input = prog
				+ "{image y;show y;}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		keepFrame();
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
//	@Test
//	public void declareAndAssign5() throws Exception {
//		String prog = "declareAndAssign5";
//		String input = prog + "{filename a; filename b; a := b;} ";	
//		System.out.println(input);
//		byte[] bytecode = genCode(input);		
//		String[] commandLineArgs = {};		
//		runCode(prog, bytecode, commandLineArgs);	
//		show("Log:\n"+RuntimeLog.globalLog);
//		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
//	}
	
	
	
	@Test
	public void testExpressionBinaryIntEq1() throws Exception {
		String prog = "testExressionBinaryIntEq";
		String input =  prog + "{int a; a := 5; int b; b := 5; show a == b;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionBinaryIntEq2() throws Exception {
		String prog = "testExressionBinaryIntEq";
		String input =  prog + "{int a; a := 5; int b; b := 10; show a == b;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionBinaryFloatEq1() throws Exception {
		String prog = "testExressionBinaryFloatEq";
		String input =  prog + "{float a; a := 5.10; float b; b := 5.1; show a == b;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionBinaryFloatEq2() throws Exception {
		String prog = "testExressionBinaryFloatEq";
		String input =  prog + "{float a; a := 5.10; float b; b := 6.1; show a == b;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionBinaryBooleanEq1() throws Exception {
		String prog = "testExressionBinaryFloatEq";
		String input =  prog + "{boolean a; a := true; boolean b; b := true; show a == b;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionBinaryBooleanEq2() throws Exception {
		String prog = "testExressionBinaryFloatEq";
		String input =  prog + "{boolean a; a := true; boolean b; b := false; show a == b;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionBinaryIntNotEq1() throws Exception {
		String prog = "testExressionBinaryIntEq";
		String input =  prog + "{int a; a := 5; int b; b := 5; show a != b;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionBinaryIntNotEq2() throws Exception {
		String prog = "testExressionBinaryIntEq";
		String input =  prog + "{int a; a := 5; int b; b := 10; show a != b;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionBinaryFloatNotEq1() throws Exception {
		String prog = "testExressionBinaryFloatEq";
		String input =  prog + "{float a; a := 5.10; float b; b := 5.1; show a != b;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionBinaryFloatNotEq2() throws Exception {
		String prog = "testExressionBinaryFloatEq";
		String input =  prog + "{float a; a := 5.10; float b; b := 6.1; show a != b;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionBinaryBooleanNotEq1() throws Exception {
		String prog = "testExressionBinaryFloatEq";
		String input =  prog + "{boolean a; a := true; boolean b; b := true; show a != b;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionBinaryBooleanNotEq2() throws Exception {
		String prog = "testExpressionBinaryBooleanNotEq2";
		String input =  prog + "{boolean a; a := true; boolean b; b := false; show a != b;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionBinaryIntGE1() throws Exception {
		String prog = "testExpressionBinaryIntGE1";
		String input =  prog + "{int a; a := 5; int b; b := 6; show a >= b;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionBinaryIntGE2() throws Exception {
		String prog = "testExpressionBinaryIntGE2";
		String input =  prog + "{int a; a := 5; int b; b := 4; show a >= b;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionBinaryIntGE3() throws Exception {
		String prog = "testExpressionBinaryIntGE3";
		String input =  prog + "{int a; a := 5; int b; b := 5; show a >= b;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionBinaryFloatGE1() throws Exception {
		String prog = "testExpressionBinaryFloatGE1";
		String input =  prog + "{float a; a := 5.10; float b; b := 6.1; show a >= b;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionBinaryFloatGE2() throws Exception {
		String prog = "testExpressionBinaryFloatGE2";
		String input =  prog + "{float a; a := 5.10; float b; b := 4.1; show a >= b;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionBinaryFloatGE3() throws Exception {
		String prog = "testExpressionBinaryFloatGE2";
		String input =  prog + "{float a; a := 5.10; float b; b := 5.1; show a >= b;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionBinaryBooleanGE1() throws Exception {
		String prog = "testExpressionBinaryBooleanGE1";
		String input =  prog + "{boolean a; a := true; boolean b; b := true; show a >= b;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionBinaryBooleanGE2() throws Exception {
		String prog = "testExpressionBinaryBooleanGE2";
		String input =  prog + "{boolean a; a := false; boolean b; b := true; show a >= b;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionBinaryIntLE1() throws Exception {
		String prog = "testExpressionBinaryIntLE1";
		String input =  prog + "{int a; a := 5; int b; b := 6; show a <= b;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionBinaryIntLE2() throws Exception {
		String prog = "testExpressionBinaryIntLE2";
		String input =  prog + "{int a; a := 5; int b; b := 4; show a <= b;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionBinaryIntLE3() throws Exception {
		String prog = "testExpressionBinaryIntLE2";
		String input =  prog + "{int a; a := 5; int b; b := 5; show a <= b;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionBinaryFloatLE1() throws Exception {
		String prog = "testExpressionBinaryFloatLE1";
		String input =  prog + "{float a; a := 5.10; float b; b := 6.1; show a <= b;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionBinaryFloatLE2() throws Exception {
		String prog = "testExpressionBinaryFloatLE2";
		String input =  prog + "{float a; a := 5.10; float b; b := 4.1; show a <= b;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionBinaryFloatLE3() throws Exception {
		String prog = "testExpressionBinaryFloatLE3";
		String input =  prog + "{float a; a := 5.10; float b; b := 5.1; show a <= b;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionBinaryBooleanLE1() throws Exception {
		String prog = "testExpressionBinaryBooleanLE1";
		String input =  prog + "{boolean a; a := true; boolean b; b := true; show a <= b;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionBinaryBooleanLE2() throws Exception {
		String prog = "testExpressionBinaryBooleanLE2";
		String input =  prog + "{boolean a; a := true; boolean b; b := false; show a <= b;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionBinaryIntGT1() throws Exception {
		String prog = "testExpressionBinaryIntGT1";
		String input =  prog + "{int a; a := 5; int b; b := 6; show a > b;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionBinaryIntGT2() throws Exception {
		String prog = "testExpressionBinaryIntGT2";
		String input =  prog + "{int a; a := 5; int b; b := 4; show a > b;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionBinaryIntGT3() throws Exception {
		String prog = "testExpressionBinaryIntGT3";
		String input =  prog + "{int a; a := 5; int b; b := 5; show a > b;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionBinaryFloatGT1() throws Exception {
		String prog = "testExpressionBinaryFloatGT1";
		String input =  prog + "{float a; a := 5.10; float b; b := 6.1; show a > b;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionBinaryFloatGT2() throws Exception {
		String prog = "testExpressionBinaryFloatGT2";
		String input =  prog + "{float a; a := 5.10; float b; b := 4.1; show a > b;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionBinaryFloatGT3() throws Exception {
		String prog = "testExpressionBinaryFloatGT3";
		String input =  prog + "{float a; a := 5.10; float b; b := 5.1; show a > b;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionBinaryBooleanGT1() throws Exception {
		String prog = "testExpressionBinaryBooleanGT1";
		String input =  prog + "{boolean a; a := true; boolean b; b := true; show a > b;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionBinaryBooleanGT2() throws Exception {
		String prog = "testExpressionBinaryBooleanGT2";
		String input =  prog + "{boolean a; a := true; boolean b; b := false; show a > b;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionBinaryIntLT1() throws Exception {
		String prog = "testExpressionBinaryIntLT1";
		String input =  prog + "{int a; a := 5; int b; b := 6; show a < b;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionBinaryIntLT2() throws Exception {
		String prog = "testExpressionBinaryIntLT2";
		String input =  prog + "{int a; a := 5; int b; b := 4; show a < b;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionBinaryIntLT3() throws Exception {
		String prog = "testExpressionBinaryIntLT3";
		String input =  prog + "{int a; a := 5; int b; b := 5; show a < b;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionBinaryFloatLT1() throws Exception {
		String prog = "testExpressionBinaryFloatLT1";
		String input =  prog + "{float a; a := 5.10; float b; b := 6.1; show a < b;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionBinaryFloatLT2() throws Exception {
		String prog = "testExpressionBinaryFloatLT2";
		String input =  prog + "{float a; a := 5.10; float b; b := 4.1; show a < b;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionBinaryFloatLT3() throws Exception {
		String prog = "testExpressionBinaryFloatLT3";
		String input =  prog + "{float a; a := 5.10; float b; b := 5.1; show a < b;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionBinaryBooleanLT1() throws Exception {
		String prog = "testExpressionBinaryBooleanLT1";
		String input =  prog + "{boolean a; a := true; boolean b; b := true; show a < b;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionBinaryBooleanLT2() throws Exception {
		String prog = "testExpressionBinaryBooleanLT2";
		String input =  prog + "{boolean a; a := false; boolean b; b := true; show a < b;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testStatementWhile1() throws Exception {
		String prog = "testStatementWhile1";
		String input =  prog + "{int a; a := 5; while(a>0) {show a; a := a - 1;};}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;5;4;3;2;1;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testStatementWhile2() throws Exception {
		String prog = "testStatementWhile2";
		String input =  prog + "{int a; a := 5; int b; b := 0; while(a>0) {show a; a := a - 1; while(b<a) {show b; b := b + 1;}; }; }";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;5;0;1;2;3;4;3;2;1;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testStatementIf1() throws Exception {
		String prog = "testStatementIf1";
		String input =  prog + "{if(true) { show 1; }; show 2;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;1;2;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testStatementIf2() throws Exception {
		String prog = "testStatementIf2";
		String input =  prog + "{if(false) { show 1; }; show 2;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;2;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testStatementIf3() throws Exception {
		String prog = "testStatementIf3";
		String input =  prog + "{if(3>2) { show 1; }; show 2;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;1;2;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionConditional1() throws Exception {
		String prog = "testExpressionConditional1";
		String input =  prog + "{int a; a := 2==2 ? 1 : 0; show a;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;1;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionConditional2() throws Exception {
		String prog = "testExpressionConditional1";
		String input =  prog + "{int a; a := 2==3 ? 1 : 0; show a;}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;0;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionPixel1() throws Exception {
		String prog = "testExpressionPixel1";
		String input =  prog + "{image im[400,300]; input im from @0; show im[53.23,45.35];}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"https://d2droglu4qf8st.cloudfront.net/2016/05/282829/Marbled-Hazelnut-Brownie-Cheesecake-for-a-Crowd_Large400_ID-1680086.jpg"};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;-13100275;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionPixelConstructor() throws Exception {
		String prog = "testExpressionPixelConstructor";
		String input =  prog + "{image im; im[0,0] := <<255,255,255,255>>; show im[0,0];}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;-1;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testLHSPixel() throws Exception {
		String prog = "testLHSPixel";
		String input =  prog + "{image im; im[0,0] := <<255,255,255,255>>; show im[0*10,0+10-10];}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;-1;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testLHSSample() throws Exception {
		String prog = "testLHSSample";
		String input =  prog + "{image im; im[0,0] := <<1,2,3,4>>; show alpha(im[0,0]); show red(im[0,0]); show green(im[0,0]); show blue(im[0,0]);}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;1;2;3;4;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testLHSSample2() throws Exception {
		String prog = "testLHSSample2";
		String input = prog + "{image im; red(im[20,23]) := 123; show red(im[20,23]); } ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
     	assertEquals("entering main;123;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionFunctionAppWithPixel() throws Exception {
		String prog = "testExpressionFunctionAppWithPixel";
		String input =  prog + "{show cart_x[2.1, 28.3]; show cart_x[2.236068, 1.1071488]; show cart_y[4.3, 34.2]; show polar_a[32,24]; show polar_r[15,67];}";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {};		
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;-2;0;1;0.6435011;68.65858;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	//////////////////
	



	
	

	
	@Test
	public void integerLit() throws Exception {
		String prog = "intgegerLit";
		String input = prog + "{show 3;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		//assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());
	}

@Test
public void showLit1() throws Exception {
    String prog = "showLit1";
    String input = prog + "{show true; show 3; show 5.6;} ";    
    byte[] bytecode = genCode(input);       
    String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case     
    runCode(prog, bytecode, commandLineArgs);   
    show("Log:\n"+RuntimeLog.globalLog);
    assertEquals("entering main;true;3;5.6;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void showLit2() throws Exception {
    String prog = "showLit2";
    String input = prog + "{show true; show 3 + 2; show 3 - 2; show 3 * 2; show 11 / 2; show 17 % 5; } ";   
    byte[] bytecode = genCode(input);       
    String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case     
    runCode(prog, bytecode, commandLineArgs);   
    show("Log:\n"+RuntimeLog.globalLog);
    assertEquals("entering main;true;5;1;6;5;2;leaving main;",RuntimeLog.globalLog.toString());
}

//@Test
//public void declaration1() throws Exception {
//    String prog = "dec";
//    String input = prog + "{int x; boolean y; float z; image i; filename f; show 3; } ";    
//    byte[] bytecode = genCode(input);       
//    String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case     
//    runCode(prog, bytecode, commandLineArgs);   
//    show("Log:\n"+RuntimeLog.globalLog);
//    assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());
//}

@Test
public void statementInput1ggj() throws Exception {
    String prog = "statementInput1";
    String input = prog + "{"
            + "int x; input x from @0; show x;"
            + "float y; input y from @3; show y;"
            + "boolean z1; input z1 from @1; show z1;"
            + "boolean z2; input z2 from @4; show z2;"
            + "filename f; input f from @2;"
            + "boolean z3; input z3 from @2+3; show z3;"
            //+ "image i1; input i1 from @6;"
            + "} "; 
    byte[] bytecode = genCode(input);       
    String[] commandLineArgs = {"15", "false", "thisfile", "4.578", "true", "false", "http://www.pngimagesfree.com/Birds/bird_png_three_by_pngimagesfree.png"}; //create command line argument array to initialize params, none in this case        
    runCode(prog, bytecode, commandLineArgs);   
    show("Log:\n"+RuntimeLog.globalLog);
    assertEquals("entering main;15;4.578;false;true;false;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void imageInput1() throws Exception {
    String prog = "imageInput1";
    String input = prog + "{"
            + "image y[128,256];"
            + "show width(y);"
            + "show height(y);"
            + "input y from @ 0 ;"
            + "show width(y);"
            + "show height(y);"
            + "show y;"
            + "sleep (2000);"
            + "}";
    byte[] bytecode = genCode(input);       
    String[] commandLineArgs = {"http://www.pngimagesfree.com/Birds/bird_png_three_by_pngimagesfree.png"}; //create command line argument array to initialize params, none in this case     
    runCode(prog, bytecode, commandLineArgs);   
    show("Log:\n"+RuntimeLog.globalLog);
    assertEquals("entering main;128;256;128;256;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void imageInput2() throws Exception {
    String prog = "imageInput2";
    String input = prog + "{"
            + "image y;"
            + "int w;"
            + "w := width(y);"
            + "show w;"
            + "show height(y);"
            + "input y from @ 0 ;"
            //+ "if (w > 0) {"
            //+ "image y[((20 + 5) * 6) / 2, 50 / 2 * 3];"
            //+ "};"
            + "show width(y);"
            + "show height(y);"
            + "show y;"
            + "sleep 2 * (1000 + 2000);"
            + "}";
    byte[] bytecode = genCode(input);       
    //String[] commandLineArgs = {"http://www.pngimagesfree.com/Birds/bird_png_three_by_pngimagesfree.png", "C:\\Users\\Sourav Dutta\\eclipse-workspace\\PLPHomework\\bin\\birdimage_2.jpg"}; //create command line argument array to initialize params, none in this case
    String[] commandLineArgs = {"http://www.pngimagesfree.com/Birds/bird_png_three_by_pngimagesfree.png", "http://www.pngimagesfree.com/Birds/bird_png_three_by_pngimagesfree.png"}; //create command line argument array to initialize params, none in this case
    runCode(prog, bytecode, commandLineArgs);   
    show("Log:\n"+RuntimeLog.globalLog);
    assertEquals("entering main;1024;1024;999;799;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void imageInput3() throws Exception {
    String prog = "imageInput3";
    String input = prog + "{"
            + "image im1;"
            + "input im1 from @0;"
            + "show width(im1);"
            + "show height(im1);"
            + "image im2;"
            + "input im2 from @ 2 ;"
            + "show width(im2);"
            + "show height(im2);"
            + "}";
    byte[] bytecode = genCode(input);       
    //String[] commandLineArgs = {"http://www.pngimagesfree.com/Birds/bird_png_three_by_pngimagesfree.png", "C:\\Users\\Sourav Dutta\\eclipse-workspace\\PLPHomework\\bin\\birdimage_1.jpg", "C:\\Users\\Sourav Dutta\\eclipse-workspace\\PLPHomework\\bin\\birdimage_2.jpg"}; //create command line argument array to initialize params, none in this case
    String[] commandLineArgs = {"http://www.pngimagesfree.com/Birds/bird_png_three_by_pngimagesfree.png", "http://www.pngimagesfree.com/Birds/bird_png_three_by_pngimagesfree.png", "http://www.pngimagesfree.com/Birds/bird_png_three_by_pngimagesfree.png"};
    runCode(prog, bytecode, commandLineArgs);   
    show("Log:\n"+RuntimeLog.globalLog);
    assertEquals("entering main;999;799;999;799;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void imageInput4() throws Exception {
    String prog = "imageInput4";
    String input = prog + "{"
            + "image y[128,256];"
            + "show width(y);"
            + "show height(y);"
            + "input y from @ 0 ;"
            + "show width(y);"
            + "show height(y);"
            + "show (y);"
            + "sleep 2000;"
            + "image z;"
            + "z:=y;"
            + "input y from @1;"
            + "show width(y);"
            + "show height(y);"
            + "show y;"
            + "sleep 2000;"
            + "show width(z);"
            + "show height(z);"
            + "show z;"
            + "sleep (2000);"
            + "}";
    byte[] bytecode = genCode(input);       
    //String[] commandLineArgs = {"http://www.pngimagesfree.com/Birds/bird_png_three_by_pngimagesfree.png", "C:\\Users\\Sourav Dutta\\eclipse-workspace\\PLPHomework\\bin\\birdimage_1.jpg"}; //create command line argument array to initialize params, none in this case      
    String[] commandLineArgs = {"http://www.pngimagesfree.com/Birds/bird_png_three_by_pngimagesfree.png", "http://www.pngimagesfree.com/Birds/bird_png_three_by_pngimagesfree.png"};
    runCode(prog, bytecode, commandLineArgs);   
    show("Log:\n"+RuntimeLog.globalLog);
    assertEquals("entering main;128;256;128;256;128;256;128;256;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void statementAssign1() throws Exception {
    String prog = "statementAssign1";
    String input = prog + "{"
            + "int x; x := 4; show x; "
            + "filename f1; filename f2; input f1 from @0; f2 := f1;"
            + "boolean b1; b1 := true; boolean b2; b2 := b1; show b2;"
            + "float fl1; float fl2; fl1 := 4.5 + x + 0.5 - 2.5; fl2 := fl1 / 0.5; show fl1; show fl2;"
            + "x := x + 1;"
            + "show x;"
            + "x := x / 5;"
            + "show x;"
            + "fl1 := fl2 / (fl1 + 1);"
            + "show fl1;"
            + "} "; 
    byte[] bytecode = genCode(input);       
    String[] commandLineArgs = {"file_name"}; //create command line argument array to initialize params, none in this case      
    runCode(prog, bytecode, commandLineArgs);   
    show("Log:\n"+RuntimeLog.globalLog);
    assertEquals("entering main;4;true;6.5;13.0;5;1;1.7333333;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void statementAssign2() throws Exception {
    String prog = "statementAssign2";
    String input = prog + "{"
            + "int x; x := 4; show x; "
            + "show x ** 2 * 3;"
            + "show x ** (2 * 3);"
            + "float a; a := 0.5;"
            + "show 2 ** a;"
            + "} "; 
    byte[] bytecode = genCode(input);       
    String[] commandLineArgs = {"file_name"}; //create command line argument array to initialize params, none in this case      
    runCode(prog, bytecode, commandLineArgs);   
    show("Log:\n"+RuntimeLog.globalLog);
    assertEquals("entering main;4;48;4096;1.4142135;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void expressionBinary1() throws Exception {
    String prog = "expressionBinary1";
    String input = prog + "{"
            + "show 2 + 2;"
            + "show 2 - 2;"
            + "show 11 * -9;"
            + "show 9 / 4;"
            + "show 17 % 3;"
            + "show 6 & 2;"
            + "show 6 | 3;"
            + "show 2 ** -2;"
            + "show 5 - 90;"
            + "} "; 
    byte[] bytecode = genCode(input);       
    String[] commandLineArgs = {"file_name"}; //create command line argument array to initialize params, none in this case      
    runCode(prog, bytecode, commandLineArgs);   
    show("Log:\n"+RuntimeLog.globalLog);
    assertEquals("entering main;4;0;-99;2;2;2;7;0;-85;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void expressionBinary2() throws Exception {
    String prog = "expressionBinary2";
    String input = prog + "{"
            + "show 2.5 + 2.5;"
            + "show 2.7 - .3;"
            + "show 2.5 * 2.5;"
            + "show 9.0 / 4.0;"
            + "show 2.0 ** -2.0;"
            + "show 2.5 ** 2.0;"
            + "} "; 
    byte[] bytecode = genCode(input);       
    String[] commandLineArgs = {"file_name"}; //create command line argument array to initialize params, none in this case      
    runCode(prog, bytecode, commandLineArgs);   
    show("Log:\n"+RuntimeLog.globalLog);
    assertEquals("entering main;5.0;2.4;6.25;2.25;0.25;6.25;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void expressionBinary3() throws Exception {
    String prog = "expressionBinary3";
    String input = prog + "{"
            + "show 2 + 2.5;"
            + "show 2 - .3;"
            + "show 2 * 2.5;"
            + "show 9 / 4.0;"
            + "show 2 ** -2.0;"
            + "show 2 ** 2.0;"
            + "} "; 
    byte[] bytecode = genCode(input);       
    String[] commandLineArgs = {"file_name"}; //create command line argument array to initialize params, none in this case      
    runCode(prog, bytecode, commandLineArgs);   
    show("Log:\n"+RuntimeLog.globalLog);
    assertEquals("entering main;4.5;1.7;5.0;2.25;0.25;4.0;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void expressionBinary4() throws Exception {
    String prog = "expressionBinary4";
    String input = prog + "{"
            + "show 2.5 + 2;"
            + "show 2.7 - 3;"
            + "show 2.5 * 2;"
            + "show 9.0 / 4;"
            + "show 2.0 ** -2;"
            + "show 2.5 ** 2;"
            + "} "; 
    byte[] bytecode = genCode(input);       
    String[] commandLineArgs = {"file_name"}; //create command line argument array to initialize params, none in this case      
    runCode(prog, bytecode, commandLineArgs);   
    show("Log:\n"+RuntimeLog.globalLog);
    assertEquals("entering main;4.5;-0.29999995;5.0;2.25;0.25;6.25;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void expressionBinary5() throws Exception {
    String prog = "expressionBinary5";
    String input = prog + "{"
            + "show (2 == 2) & true;"
            //+ "show 2 != 3 | (3.25 == 3.25);"
            + "show 2 <= 5;"
            + "show 6 > 6;"
            + "show 6 >= 6;"
            + "show 8 <= 8;"
            + "show 6 >= 7;"
            + "show 8 <= 10;"
            + "} "; 
    byte[] bytecode = genCode(input);       
    String[] commandLineArgs = {"file_name"}; //create command line argument array to initialize params, none in this case      
    runCode(prog, bytecode, commandLineArgs);   
    show("Log:\n"+RuntimeLog.globalLog);
    assertEquals("entering main;true;true;false;true;true;false;true;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void expressionBinary6() throws Exception {
    String prog = "expressionBinary6";
    String input = prog + "{"
            + "show (2.7 == 2.7) & true;"
            + "show 2.5 != 3.8 | (3.25 == 3.25);"
            + "show 2.7 < 2.7 & false;"
            + "show 6.6 > 6.6;"
            + "show 6.34 >= 6.567;"
            + "show 8.245 <= 8.3;"
            + "show 6.0 >= 7.1;"
            + "show 8.9 <= 10.0;"
            + "} "; 
    byte[] bytecode = genCode(input);       
    String[] commandLineArgs = {"file_name"}; //create command line argument array to initialize params, none in this case      
    runCode(prog, bytecode, commandLineArgs);   
    show("Log:\n"+RuntimeLog.globalLog);
    assertEquals("entering main;true;true;false;false;false;true;false;true;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void expressionPredefined1() throws Exception {
    String prog = "expressionPredefined1";
    String input = prog + "{"
            + "show Z;"
            + "show default_width;"
            + "show default_height;"
            + "} "; 
    byte[] bytecode = genCode(input);       
    String[] commandLineArgs = {"file_name"}; //create command line argument array to initialize params, none in this case      
    runCode(prog, bytecode, commandLineArgs);   
    show("Log:\n"+RuntimeLog.globalLog);
    assertEquals("entering main;255;1024;1024;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void expressionFunctionArgs1() throws Exception {
    String prog = "expressionFunctionArgs1";
    String input = prog + "{"
            + "show sin(8.0);"
            + "show cos(8.0);"
            + "show atan(0.0);"
            + "show atan(10.0);"
            + "show log(20.0);"
            + "show int(4.7);"
            + "show float(Z) == 255.0;"
            //+ "show int(45.7) == 45;"
            + "show abs(-67.8);"
            + "show abs(67.8);"
            + "show float(67.8);"
            + "show int(67);"
            + "} "; 
    byte[] bytecode = genCode(input);       
    String[] commandLineArgs = {"file_name"}; //create command line argument array to initialize params, none in this case      
    runCode(prog, bytecode, commandLineArgs);   
    show("Log:\n"+RuntimeLog.globalLog);
    assertEquals("entering main;0.98935825;-0.14550003;0.0;1.4711276;2.9957323;4;true;67.8;67.8;67.8;67;leaving main;",RuntimeLog.globalLog.toString());
}
@Test
public void expressionFunctionArgs2() throws Exception {
    String prog = "expressionFunctionArgs1";
    String input = prog + "{"
            /*+ "show sin(8.0);"
            + "show cos(8.0);"
            + "show atan(0.0);"
            + "show atan(10.0);"
            + "show log(20.0);"
            + "show int(4.7);"*/
            + "show float(Z) == 255.0;"
            /*//+ "show int(45.7) == 45;"
            + "show abs(-67.8);"
            + "show abs(67.8);"
            + "show float(67.8);"
            + "show int(67);"*/
            + "} "; 
    byte[] bytecode = genCode(input);       
    String[] commandLineArgs = {"file_name"}; //create command line argument array to initialize params, none in this case      
    runCode(prog, bytecode, commandLineArgs);   
    show("Log:\n"+RuntimeLog.globalLog);
    assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
}
@Test
public void Color1() throws Exception {
    String prog = "color1";
    String input = prog + "{int a; a := 123456789;\n show red(a); show green(a); show blue(a);}";
    byte[] bytecode = genCode(input);       
    String[] commandLineArgs = {"file_name"}; //create command line argument array to initialize params, none in this case      
    runCode(prog, bytecode, commandLineArgs);   
    show("Log:\n"+RuntimeLog.globalLog);
    assertEquals("entering main;91;205;21;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void Color2() throws Exception {
    String prog = "color2";
    String input = prog + "{int a; a := 123456789; show alpha(a);\n a := -1; show alpha(a);}";
    byte[] bytecode = genCode(input);       
    String[] commandLineArgs = {"file_name"}; //create command line argument array to initialize params, none in this case      
    runCode(prog, bytecode, commandLineArgs);   
    show("Log:\n"+RuntimeLog.globalLog);
    assertEquals("entering main;7;255;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void imageWrite1() throws Exception {
    String prog = "imageWrite1";
    String input = prog + "{"
            + "image y[128,256];"
            + "show width(y);"
            + "show height(y);"
            + "input y from @ 0 ;"
            + "show width(y);"
            + "show height(y);"
            + "show y;"
            + "filename f;"
            + "input f from @1;"
            + "write y to f;"
            + "}";
    byte[] bytecode = genCode(input);       
    String[] commandLineArgs = {"http://www.pngimagesfree.com/Birds/bird_png_three_by_pngimagesfree.png", "writeImg1.png"}; //create command line argument array to initialize params, none in this case        
    runCode(prog, bytecode, commandLineArgs);   
    show("Log:\n"+RuntimeLog.globalLog);
    assertEquals("entering main;128;256;128;256;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void statementWhile1() throws Exception {
    String prog = "statementWhile1";
    String input = prog + "{"
            + "int x;"
            + "int y;"
            + "x := 10;"
            + "y := 5;"
            + "show x;"
            + "show y;"
            + "while (x > y) {"
            + "x := x - 1;"
            + "show x;"
            + "};"
            + "show x;"
            + "show y;"
            + "}";
    byte[] bytecode = genCode(input);       
    String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case     
    runCode(prog, bytecode, commandLineArgs);   
    show("Log:\n"+RuntimeLog.globalLog);
    assertEquals("entering main;10;5;9;8;7;6;5;5;5;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void statementWhile2() throws Exception {
    String prog = "statementWhile2";
    String input = prog + "{"
            + "int x;"
            + "int y;"
            + "x := 10;"
            + "y := 5;"
            + "show x;"
            + "show y;"
            + "while (x >= y) {"
            + "x := x - 1;"
            + "show x;"
            + "};"
            + "show x;"
            + "show y;"
            + "}";
    byte[] bytecode = genCode(input);       
    String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case     
    runCode(prog, bytecode, commandLineArgs);   
    show("Log:\n"+RuntimeLog.globalLog);
    assertEquals("entering main;10;5;9;8;7;6;5;4;4;5;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void statementWhile3() throws Exception {
    String prog = "statementWhile3";
    String input = prog + "{"
            + "int x;"
            + "int y;"
            + "x := 10;"
            + "y := 5;"
            + "show x;"
            + "show y;"
            + "while (x >= y) {"
            + "x := x - 1;"
            + "int y;"
            + "y := 20;"
            + "show x;"
            + "show y;"
            + "};"
            + "show x;"
            + "show y;"
            + "}";
    byte[] bytecode = genCode(input);       
    String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case     
    runCode(prog, bytecode, commandLineArgs);   
    show("Log:\n"+RuntimeLog.globalLog);
    assertEquals("entering main;10;5;9;20;8;20;7;20;6;20;5;20;4;20;4;5;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void statementIf1() throws Exception {
    String prog = "statementIf1";
    String input = prog + "{"
            + "int x;"
            + "int y;"
            + "x := 10;"
            + "y := 5;"
            + "if (x >= y) {"
            + "show x;"
            + "};"
            + "if (x <= y) {"
            + "show y;"
            + "};"
            + "show x;"
            + "show y;"
            + "}";
    byte[] bytecode = genCode(input);       
    String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case     
    runCode(prog, bytecode, commandLineArgs);   
    show("Log:\n"+RuntimeLog.globalLog);
    assertEquals("entering main;10;10;5;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void statementIf2() throws Exception {
    String prog = "statementIf2";
    String input = prog + "{"
            + "int x;"
            + "int y;"
            + "x := 10;"
            + "y := 5;"
            + "if (x >= y) {"
            + "int z;"
            + "z := 12;"
            + "show z;"
            + "show x;"
            + "};"
            + "if (x <= y) {"
            + "show y;"
            + "};"
            + "show x;"
            + "show y;"
            + "}";
    byte[] bytecode = genCode(input);       
    String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case     
    runCode(prog, bytecode, commandLineArgs);   
    show("Log:\n"+RuntimeLog.globalLog);
    assertEquals("entering main;12;10;10;5;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void statementIf3() throws Exception {
    String prog = "statementIf3";
    String input = prog + "{"
            + "int x;"
            + "int y;"
            + "x := 10;"
            + "y := 5;"
            + "if (x >= y) {"
            + "int z;"
            + "z := 12;"
            + "show z;"
            + "show x;"
            + "};"
            + "if (x <= y) {"
            + "int x;"
            + "show y;"
            + "};"
            + "show x;"
            + "show y;"
            + "}";
    byte[] bytecode = genCode(input);       
    String[] commandLineArgs = {"abc"}; //create command line argument array to initialize params, none in this case        
    runCode(prog, bytecode, commandLineArgs);   
    show("Log:\n"+RuntimeLog.globalLog);
    assertEquals("entering main;12;10;10;5;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void expressionConditional1() throws Exception {
    String prog = "expressionConditional1";
    String input = prog + "{"
            + "int x;"
            + "int y;"
            + "x := 10;"
            + "y := 5;"
            + "int z;"
            + "z := x > y ? 100 : 200;"
            + "show z;"
            + "x := 3;"
            + "z := x > y ? 100 : 200;"
            + "show z;"
            + "}";
    byte[] bytecode = genCode(input);       
    String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case     
    runCode(prog, bytecode, commandLineArgs);   
    show("Log:\n"+RuntimeLog.globalLog);
    assertEquals("entering main;100;200;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void lhsPixel1() throws Exception {
    String prog = "lhsPixel1";
    String input = prog + "{"
            + "image y;"
            + "show width(y);"
            + "show height(y);"
            + "input y from @ 0 ;"
            + "show width(y);"
            + "show height(y);"
            //+ "show y;"
            //+ "sleep 2000;"
            + "y[100, 100] := 100;"
            + "filename f;"
            + "input f from @1;"
            + "write y to f;"
            + "}";
    byte[] bytecode = genCode(input);       
    String[] commandLineArgs = {"http://www.pngimagesfree.com/Birds/bird_png_three_by_pngimagesfree.png", "writeImg2.png"}; //create command line argument array to initialize params, none in this case        
    runCode(prog, bytecode, commandLineArgs);   
    show("Log:\n"+RuntimeLog.globalLog);
    assertEquals("entering main;1024;1024;999;799;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void lhsSample1() throws Exception {
    String prog = "lhsSample1";
    String input = prog + "{"
            + "image y;"
            + "show width(y);"
            + "show height(y);"
            + "input y from @ 0 ;"
            + "show width(y);"
            + "show height(y);"
            + "show y;"
            + "sleep 2000;"
            + "int z;"
            + "z:=y[width(y) / 2, height(y) / 2];"
            + "show z;"
            + "red(y[100, 100]) := 100;"
            + "z:=y[100,100];"
            + "show z;"
            + "filename f;"
            + "input f from @1;"
            + "write y to f;"
            + "}";
    byte[] bytecode = genCode(input);       
    String[] commandLineArgs = {"http://www.pngimagesfree.com/Birds/bird_png_three_by_pngimagesfree.png", "writeImg3.png"}; //create command line argument array to initialize params, none in this case        
    runCode(prog, bytecode, commandLineArgs);   
    show("Log:\n"+RuntimeLog.globalLog);
    assertEquals("entering main;1024;1024;999;799;0;6553600;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void pixelCons1() throws Exception {
    String prog = "pixelCons1";
    String input = prog + "{"
            + "int a;"
            + "a:=100;"
            + "int b;"
            + "b:=200;"
            + "int c;"
            + "c:=150;"
            + "int d;"
            + "d:=250;"
            + "int y;"
            + "y := <<a, b, c, d>>;"
            + "show y;"
            + "}";
    byte[] bytecode = genCode(input);       
    String[] commandLineArgs = {"http://www.pngimagesfree.com/Birds/bird_png_three_by_pngimagesfree.png", "writeImg3.png"}; //create command line argument array to initialize params, none in this case        
    runCode(prog, bytecode, commandLineArgs);   
    show("Log:\n"+RuntimeLog.globalLog);
    assertEquals("entering main;1690867450;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void funcAppWithPixel1() throws Exception {
    String prog = "funcAppWithPixel1";
    String input = prog + "{\n"
            + "float r;\n"
            + "r:=10.5;\n"
            + "float theta;\n"
            + "theta:=30.3;\n"
            + "int x;\n"
            + "int y;\n"
            + "x:=cart_x[r,theta];\n"
            + "y:=cart_y[r,theta];\n"
            + "show r;\n"
            + "show theta;\n"
            + "show x;\n"
            + "show y;\n"
            + "r := polar_r[x, y];\n"
            + "theta := polar_a[x,y];\n"
            + "show r;\n"
            + "show theta;\n"
            + "show x;\n"
            + "show y;\n"
            + "}";
    byte[] bytecode = genCode(input);       
    String[] commandLineArgs = {"http://www.pngimagesfree.com/Birds/bird_png_three_by_pngimagesfree.png", "writeImg3.png"}; //create command line argument array to initialize params, none in this case        
    runCode(prog, bytecode, commandLineArgs);   
    show("Log:\n"+RuntimeLog.globalLog);
    //assertEquals("entering main;10.5;30.3;4;-9;9.848858;2.7233684;4;-9;leaving main;",RuntimeLog.globalLog.toString());
}


@Test
public void full_testDemo1() throws Exception {
    String prog = "demo1";
    String input = prog + "{image h;input h from @0;show h; sleep(4000); image g[width(h),height(h)];int x;x:=0;"
                    + "while(x<width(g)){int y;y:=0;while(y<height(g)){g[x,y]:=h[y,x];y:=y+1;};x:=x+1;};show g;sleep(4000);}";
    byte[] bytecode = genCode(input);        
    String[] commandLineArgs = {"http://www.pngimagesfree.com/Birds/bird_png_three_by_pngimagesfree.png"}; //create command line argument array to initialize params, none in this case     
    runCode(prog, bytecode, commandLineArgs);   
    show("Log:\n"+RuntimeLog.globalLog);
    assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void full_makeRedImage() throws Exception {
    String prog = "makeRedImage";
    String input = prog + "{image im[256,256];int x;int y;x:=0;y:=0;while(x<width(im)) {y:=0;while(y<height(im)) {im[x,y]:=<<255,255,0,0>>;y:=y+1;};x:=x+1;};show im;sleep 2000;}";
    byte[] bytecode = genCode(input);        
    String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case     
    runCode(prog, bytecode, commandLineArgs);   
    show("Log:\n"+RuntimeLog.globalLog);
    assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void full_testPolarR2() throws Exception {
    String prog = "PolarR2";
    String input = prog + "{image im[1024,1024];int x;x:=0;while(x<width(im)) {int y;y:=0;while(y<height(im)) {float p;p:=polar_r[x,y];int r;r:=int(p)%Z;im[x,y]:=<<Z,0,0,r>>;y:=y+1;};x:=x+1;};show im;sleep 2000;}";
    byte[] bytecode = genCode(input);        
    String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case     
    runCode(prog, bytecode, commandLineArgs);   
    show("Log:\n"+RuntimeLog.globalLog);
    assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void full_testSamples() throws Exception {
    String prog = "samples";
    String input = prog + "{image bird; input bird from @0;show bird;sleep(4000);image bird2[width(bird),height(bird)];int x;x:=0;while(x<width(bird2)) {int y;y:=0;while(y<height(bird2)) {blue(bird2[x,y]):=red(bird[x,y]);green(bird2[x,y]):=blue(bird[x,y]);red(bird2[x,y]):=green(bird[x,y]);alpha(bird2[x,y]):=Z;y:=y+1;};x:=x+1;};show bird2;sleep(4000);}";
    byte[] bytecode = genCode(input);        
    String[] commandLineArgs = {"http://www.pngimagesfree.com/Birds/bird_png_three_by_pngimagesfree.png"}; //create command line argument array to initialize params, none in this case     
    runCode(prog, bytecode, commandLineArgs);   
    show("Log:\n"+RuntimeLog.globalLog);
    assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void testCase1() throws Exception {
    String prog = "testCase1";
    String input = prog + "{image y[1000,1000]; image copy[1000,1000]; input y from @ 0 ; show y; sleep 1000; copy := y; show copy; sleep 2000;} ";
    byte[] bytecode = genCode(input);        
    String[] commandLineArgs = {"http://www.pngimagesfree.com/Birds/bird_png_three_by_pngimagesfree.png"}; //create command line argument array to initialize params, none in this case     
    runCode(prog, bytecode, commandLineArgs);   
    show("Log:\n"+RuntimeLog.globalLog);
    assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
}

@Test
public void imageInput11() throws Exception {
    String prog = "imageInput1";
    String input = prog + "{"
            + "image y;"
            + "show width(y);"
            + "show height(y);"
            //+ "input y from @ 0 ;"
            //+ "show width(y);"
            //+ "show height(y);"
            //+ "show y;"
            //+ "sleep (2000);"
            + "}";
    byte[] bytecode = genCode(input);       
    String[] commandLineArgs = {"http://www.pngimagesfree.com/Birds/bird_png_three_by_pngimagesfree.png"}; //create command line argument array to initialize params, none in this case     
    runCode(prog, bytecode, commandLineArgs);   
    show("Log:\n"+RuntimeLog.globalLog);
    assertEquals("entering main;1024;1024;leaving main;",RuntimeLog.globalLog.toString());
}
}