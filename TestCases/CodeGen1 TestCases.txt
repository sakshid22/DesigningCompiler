

	
	@Test
	public void integerLitShow() throws Exception {
		String prog = "intgegerLit";
		String input = prog + "{show 3;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;3;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void floatLitShow() throws Exception {
		String prog = "floatLit";
		String input = prog + "{show 3.0;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;3.0;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void booleanLitShow() throws Exception {
		String prog = "booleanLit";
		String input = prog + "{show true;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void imageLitShow() throws Exception {
		String prog = "imageLit";
		String input = prog + "{image a; show a;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declaration0() throws Exception {
		String prog = "intLit";
		String input = prog + "{int a;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declaration1() throws Exception {
		String prog = "floatLit";
		String input = prog + "{float a;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declaration2() throws Exception {
		String prog = "booleanLit";
		String input = prog + "{boolean a;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declaration3() throws Exception {
		String prog = "imageLit";
		String input = prog + "{image a;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declaration4() throws Exception {
		String prog = "imageLit2";
		String input = prog + "{image a[3, 4];} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign0() throws Exception {
		String prog = "booleanLit";
		String input = prog + "{int a; a := 2;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign1() throws Exception {
		String prog = "floatLit";
		String input = prog + "{float a; a := 2.0;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign2() throws Exception {
		String prog = "booleanLit";
		String input = prog + "{boolean a; a := true;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign3() throws Exception {
		String prog = "imageLit";
		String input = prog + "{image a; image b; a := b;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign4() throws Exception {
		String prog = "imageLit";
		String input = prog + "{image a[1,2]; image b[3,4]; a := b;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign5() throws Exception {
		String prog = "fileLit";
		String input = prog + "{filename a; filename b; a := b;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign6() throws Exception {
		String prog = "intLit";
		String input = prog + "{int a; int b; b := 5; a := b + 5; show a;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;10;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign7() throws Exception {
		String prog = "intFloatLit";
		String input = prog + "{float a; int b; b := 5; a := b + 5.0; show a;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;10.0;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign8() throws Exception {
		String prog = "intFloatLit";
		String input = prog + "{float a; float b; b := 5.0; a := b + 5;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign9() throws Exception {
		String prog = "intFloatLit";
		String input = prog + "{float a; float b; b := 5.0; a := b + 5.0;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign10() throws Exception {
		String prog = "intFloatLit";
		String input = prog + "{float a; float b; b := 5.0; a := b - 6.0; show a;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;-1.0;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign11() throws Exception {
		String prog = "intFloatLit";
		String input = prog + "{boolean a; boolean b; b := true; a := b & false;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign12() throws Exception {
		String prog = "intFloatLit";
		String input = prog + "{int a; int b; b := 10; a := b % 3;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign13() throws Exception {
		String prog = "intFloatLit";
		String input = prog + "{int a; int b; b := 10; a := b | 3;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign14() throws Exception {
		String prog = "intFloatLit";
		String input = prog + "{boolean a; boolean b; b := true; a := b | false;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign15() throws Exception {
		String prog = "intFloatLit";
		String input = prog + "{int a; int b; b := 5; a := b ** 2; show a;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;25;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign16() throws Exception {
		String prog = "intFloatLit";
		String input = prog + "{float a; float b; b := 5.5; a := b ** 2; show a;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;30.25;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign17() throws Exception {
		String prog = "intFloatLit";
		String input = prog + "{float a; float b; b := 5.5; a := b ** 2.1; show a;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;35.872494;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign18() throws Exception {
		String prog = "intFloatLit";
		String input = prog + "{float a; float b; b := 5.2; a := 2 ** b; show a;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;36.758343;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void declareAndAssign19() throws Exception {
		String prog = "intFloatLit";
		String input = prog + "{float a; int b; b := 7; a := b / 2.0; show a;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;3.5;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void sleep0() throws Exception {
		String prog = "sleepProgram";
		String input = prog + "{sleep 1000;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionUnary0() throws Exception {
		String prog = "unary";
		String input = prog + "{int a; a := !1; show a;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;-2;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionUnary1() throws Exception {
		String prog = "unary1";
		String input = prog + "{boolean a; a := !true; show a;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;false;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionUnary2() throws Exception {
		String prog = "unary1";
		String input = prog + "{int a; int b; b := 5; a := -b; show a;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;-5;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionPredefinedName0() throws Exception {
		String prog = "predef";
		String input = prog + "{int a; a := Z+5; show a;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;260;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionPredefinedName1() throws Exception {
		String prog = "predef";
		String input = prog + "{int a; a := default_height+default_width; show a;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;2048;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionFunctionAppWithExpressionArg0() throws Exception {
		String prog = "predef";
		String input = prog + "{int a; a := 5; show float(a);} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;5.0;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionFunctionAppWithExpressionArg1() throws Exception {
		String prog = "predef";
		String input = prog + "{float a; a := 5.0; show int(a);} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;5;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionFunctionAppWithExpressionArg2() throws Exception {
		String prog = "predef";
		String input = prog + "{float a; a := 180.0; show sin(a);} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;-0.80115265;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionFunctionAppWithExpressionArg3() throws Exception {
		String prog = "predef";
		String input = prog + "{float a; a := -180.0; show abs(a);} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;180.0;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionFunctionAppWithExpressionArg4() throws Exception {
		String prog = "predef";
		String input = prog + "{image a; show height(a);} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;1024;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionFunctionAppWithExpressionArg5() throws Exception {
		String prog = "predef";
		String input = prog + "{image a; show width(a);} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;1024;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	
	@Test
	public void expressionFunctionAppWithExpressionArg6() throws Exception {
		String prog = "predef";
		String input = prog + "{image a[103, 103]; show width(a);} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;103;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionFunctionAppWithExpressionArg7() throws Exception {
		String prog = "predef";
		String input = prog + "{int foo; foo := int(4.0); show foo;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;4;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void lhsIdent0() throws Exception {
		String prog = "predef";
		String input = prog + "{image foo; image bar; foo := bar; show foo; sleep 1000;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void lhsIdent1() throws Exception {
		String prog = "predef";
		String input = prog + "{int foo; int a; a := 5; foo := a; show foo;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;5;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void statementInput0() throws Exception {
		String prog = "si";
		String input = prog + "{int a; input a from @ 0; show a;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"5", "5.0"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;5;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void statementInput1() throws Exception {
		String prog = "si";
		String input = prog + "{float a; input a from @ 1; show a;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"5", "5.0"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;5.0;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void statementInput2() throws Exception {
		String prog = "si";
		String input = prog + "{filename a; input a from @ 0;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"pic.png"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionIdent3() throws Exception {
		String prog = "sif";
		String input = prog + "{int a; a := 5; show a;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"pic.png"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;5;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void statementInput3() throws Exception {
		String prog = "sif";
		String input = prog + "{image a; input a from @ 0; show a; sleep 1000;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"C:\\Users\\Sai.potamsetti\\eclipse-workspace\\PLPHomework\\src\\cop5556sp18\\pic.png"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void statementInput4() throws Exception {
		String prog = "sif";
		String input = prog + "{image a[500, 500]; input a from @ 0; show a; sleep 1000;} ";	
		System.out.println(input);
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"C:\\Users\\Sai.potamsetti\\eclipse-workspace\\PLPHomework\\src\\cop5556sp18\\pic.png"}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	

	
